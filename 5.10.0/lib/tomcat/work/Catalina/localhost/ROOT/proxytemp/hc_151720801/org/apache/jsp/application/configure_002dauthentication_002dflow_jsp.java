/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.31
 * Generated at: 2020-07-29 13:16:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.application;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.google.gson.JsonArray;
import com.google.gson.JsonPrimitive;
import org.apache.axis2.context.ConfigurationContext;
import org.apache.commons.lang.StringEscapeUtils;
import org.owasp.encoder.Encode;
import org.wso2.carbon.CarbonConstants;
import org.wso2.carbon.identity.application.common.model.xsd.AuthenticationStep;
import org.wso2.carbon.identity.application.common.model.xsd.FederatedAuthenticatorConfig;
import org.wso2.carbon.identity.application.common.model.xsd.IdentityProvider;
import org.wso2.carbon.identity.application.common.model.xsd.LocalAuthenticatorConfig;
import org.wso2.carbon.identity.application.common.model.xsd.Property;
import org.wso2.carbon.identity.application.mgt.ui.ApplicationBean;
import org.wso2.carbon.identity.application.mgt.ui.client.ApplicationManagementServiceClient;
import org.wso2.carbon.identity.application.mgt.ui.client.ConditionalAuthMgtClient;
import org.wso2.carbon.identity.application.mgt.ui.util.ApplicationMgtUIUtil;
import org.wso2.carbon.ui.CarbonUIMessage;
import org.wso2.carbon.ui.CarbonUIUtil;
import org.wso2.carbon.utils.ServerConstants;
import java.util.HashMap;
import java.util.Map;
import java.util.ResourceBundle;

public final class configure_002dauthentication_002dflow_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

public static final String IS_HANDLER = "IS_HANDLER";
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/tlds/carbontags.tld", Long.valueOf(1582879640000L));
    _jspx_dependants.put("/WEB-INF/tlds/fmt.tld", Long.valueOf(1582879640000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.apache.axis2.context.ConfigurationContext");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.mgt.ui.client.ConditionalAuthMgtClient");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.mgt.ui.ApplicationBean");
    _jspx_imports_classes.add("org.wso2.carbon.ui.CarbonUIUtil");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.common.model.xsd.Property");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.common.model.xsd.IdentityProvider");
    _jspx_imports_classes.add("com.google.gson.JsonArray");
    _jspx_imports_classes.add("org.owasp.encoder.Encode");
    _jspx_imports_classes.add("java.util.ResourceBundle");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.common.model.xsd.LocalAuthenticatorConfig");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.mgt.ui.util.ApplicationMgtUIUtil");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.mgt.ui.client.ApplicationManagementServiceClient");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("org.wso2.carbon.ui.CarbonUIMessage");
    _jspx_imports_classes.add("com.google.gson.JsonPrimitive");
    _jspx_imports_classes.add("org.wso2.carbon.utils.ServerConstants");
    _jspx_imports_classes.add("org.wso2.carbon.CarbonConstants");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.common.model.xsd.FederatedAuthenticatorConfig");
    _jspx_imports_classes.add("org.apache.commons.lang.StringEscapeUtils");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.common.model.xsd.AuthenticationStep");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fcarbon_005fbreadcrumb_0026_005ftopPage_005fresourceBundle_005frequest_005flabel_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fcarbon_005fbreadcrumb_0026_005ftopPage_005fresourceBundle_005frequest_005flabel_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fcarbon_005fbreadcrumb_0026_005ftopPage_005fresourceBundle_005frequest_005flabel_005fnobody.release();
    _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename.release();
    _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!--\n");
      out.write("~ Copyright (c) 2005-2013, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n");
      out.write("~\n");
      out.write("~ WSO2 Inc. licenses this file to you under the Apache License,\n");
      out.write("~ Version 2.0 (the \"License\"); you may not use this file except\n");
      out.write("~ in compliance with the License.\n");
      out.write("~ You may obtain a copy of the License at\n");
      out.write("~\n");
      out.write("~ http://www.apache.org/licenses/LICENSE-2.0\n");
      out.write("~\n");
      out.write("~ Unless required by applicable law or agreed to in writing,\n");
      out.write("~ software distributed under the License is distributed on an\n");
      out.write("~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n");
      out.write("~ KIND, either express or implied. See the License for the\n");
      out.write("~ specific language governing permissions and limitations\n");
      out.write("~ under the License.\n");
      out.write("-->\n");
      out.write("<link rel=\"stylesheet\" href=\"codemirror/lib/codemirror.css\">\n");
      out.write("<link rel=\"stylesheet\" href=\"codemirror/theme/mdn-like.css\">\n");
      out.write("<link rel=\"stylesheet\" href=\"codemirror/addon/dialog/dialog.css\">\n");
      out.write("<link rel=\"stylesheet\" href=\"codemirror/addon/display/fullscreen.css\">\n");
      out.write("<link rel=\"stylesheet\" href=\"codemirror/addon/fold/foldgutter.css\">\n");
      out.write("<link rel=\"stylesheet\" href=\"codemirror/addon/hint/show-hint.css\">\n");
      out.write("<link rel=\"stylesheet\" href=\"codemirror/addon/lint/lint.css\">\n");
      out.write("\n");
      out.write("<link rel=\"stylesheet\" href=\"css/idpmgt.css\">\n");
      out.write("<link rel=\"stylesheet\" href=\"css/conditional-authentication.css\">\n");
      out.write("\n");
      out.write("<script src=\"codemirror/lib/codemirror.js\"></script>\n");
      out.write("<script src=\"codemirror/keymap/sublime.js\"></script>\n");
      out.write("<script src=\"codemirror/mode/javascript/javascript.js\"></script>\n");
      out.write("\n");
      out.write("<script src=\"codemirror/addon/lint/jshint.min.js\"></script>\n");
      out.write("<script src=\"codemirror/addon/lint/lint.js\"></script>\n");
      out.write("<script src=\"codemirror/addon/lint/javascript-lint.js\"></script>\n");
      out.write("<script src=\"codemirror/addon/hint/anyword-hint.js\"></script>\n");
      out.write("<script src=\"codemirror/addon/hint/show-hint.js\"></script>\n");
      out.write("<script src=\"codemirror/addon/hint/javascript-hint.js\"></script>\n");
      out.write("<script src=\"codemirror/addon/hint/wso2-hints.js\"></script>\n");
      out.write("\n");
      out.write("<script src=\"codemirror/addon/edit/closebrackets.js\"></script>\n");
      out.write("<script src=\"codemirror/addon/edit/matchbrackets.js\"></script>\n");
      out.write("<script src=\"codemirror/addon/fold/brace-fold.js\"></script>\n");
      out.write("<script src=\"codemirror/addon/fold/foldcode.js\"></script>\n");
      out.write("<script src=\"codemirror/addon/fold/foldgutter.js\"></script>\n");
      out.write("<script src=\"codemirror/addon/display/fullscreen.js\"></script>\n");
      out.write("<script src=\"codemirror/addon/display/placeholder.js\"></script>\n");
      out.write("<script src=\"codemirror/addon/comment/comment.js\"></script>\n");
      out.write("<script src=\"codemirror/addon/selection/active-line.js\"></script>\n");
      out.write("<script src=\"codemirror/addon/dialog/dialog.js\"></script>\n");
      out.write("<script src=\"codemirror/addon/display/panel.js\"></script>\n");
      out.write("<script src=\"codemirror/util/formatting.js\"></script>\n");
      out.write("<script src=\"js/handlebars.min-v4.0.11.js\"></script>\n");
      out.write("\n");
      out.write("<script src=\"../admin/js/main.js\" type=\"text/javascript\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"../identity/validation/js/identity-validate.js\"></script>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      //  carbon:breadcrumb
      org.wso2.carbon.ui.taglibs.Breadcrumb _jspx_th_carbon_005fbreadcrumb_005f0 = (org.wso2.carbon.ui.taglibs.Breadcrumb) _005fjspx_005ftagPool_005fcarbon_005fbreadcrumb_0026_005ftopPage_005fresourceBundle_005frequest_005flabel_005fnobody.get(org.wso2.carbon.ui.taglibs.Breadcrumb.class);
      boolean _jspx_th_carbon_005fbreadcrumb_005f0_reused = false;
      try {
        _jspx_th_carbon_005fbreadcrumb_005f0.setPageContext(_jspx_page_context);
        _jspx_th_carbon_005fbreadcrumb_005f0.setParent(null);
        // /application/configure-authentication-flow.jsp(84,0) name = label type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_carbon_005fbreadcrumb_005f0.setLabel("breadcrumb.advanced.auth.step.config");
        // /application/configure-authentication-flow.jsp(84,0) name = resourceBundle type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_carbon_005fbreadcrumb_005f0.setResourceBundle("org.wso2.carbon.identity.application.mgt.ui.i18n.Resources");
        // /application/configure-authentication-flow.jsp(84,0) name = topPage type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_carbon_005fbreadcrumb_005f0.setTopPage(true);
        // /application/configure-authentication-flow.jsp(84,0) name = request type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_carbon_005fbreadcrumb_005f0.setRequest(request);
        int _jspx_eval_carbon_005fbreadcrumb_005f0 = _jspx_th_carbon_005fbreadcrumb_005f0.doStartTag();
        if (_jspx_th_carbon_005fbreadcrumb_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
        _005fjspx_005ftagPool_005fcarbon_005fbreadcrumb_0026_005ftopPage_005fresourceBundle_005frequest_005flabel_005fnobody.reuse(_jspx_th_carbon_005fbreadcrumb_005f0);
        _jspx_th_carbon_005fbreadcrumb_005f0_reused = true;
      } finally {
        org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_carbon_005fbreadcrumb_005f0, _jsp_getInstanceManager(), _jspx_th_carbon_005fbreadcrumb_005f0_reused);
      }
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../dialog/display_messages.jsp", out, false);
      out.write('\n');
      out.write('\n');
 String BUNDLE = "org.wso2.carbon.identity.application.mgt.ui.i18n.Resources";
    ResourceBundle resourceBundle = ResourceBundle.getBundle(BUNDLE, request.getLocale());

    ApplicationBean appBean = ApplicationMgtUIUtil.getApplicationBeanFromSession(session, request.getParameter("spName"));
    String spName = appBean.getServiceProvider().getApplicationName();
    Map<String, String> claimMapping = appBean.getClaimMapping();
    
    LocalAuthenticatorConfig[] localAuthenticatorConfigs = appBean.getLocalAuthenticatorConfigs();
    IdentityProvider[] federatedIdPs = appBean.getFederatedIdentityProviders();
    String templatesJson = null;
    String availableJsFunctionsJson = null;
    
    StringBuilder localAuthTypes = new StringBuilder();
    String startOption = "<option value=\"";
    String middleOption = "\">";
    String endOption = "</option>";
    
    if (localAuthenticatorConfigs != null && localAuthenticatorConfigs.length > 0) {
        for (LocalAuthenticatorConfig auth : localAuthenticatorConfigs) {
            localAuthTypes.append(startOption).append(Encode.forHtmlAttribute(auth.getName())).append(middleOption)
                .append(Encode.forHtmlContent(auth.getDisplayName())).append(endOption);
        }
    }
    
    try {
        String cookie = (String) session.getAttribute(ServerConstants.ADMIN_SERVICE_COOKIE);
        String backendServerURL = CarbonUIUtil.getServerURL(config.getServletContext(), session);
        ConfigurationContext configContext = (ConfigurationContext) config.getServletContext().getAttribute(CarbonConstants.CONFIGURATION_CONTEXT);
        ApplicationManagementServiceClient serviceClient = new ApplicationManagementServiceClient(cookie, backendServerURL, configContext);
        templatesJson = serviceClient.getAuthenticationTemplatesJson();
        ConditionalAuthMgtClient conditionalAuthMgtClient = new
            ConditionalAuthMgtClient(cookie, backendServerURL, configContext);
        String[] functionList = conditionalAuthMgtClient.listAvailableFunctions();
        JsonArray jsonArray = new JsonArray();
        for (String function : functionList) {
            jsonArray.add(new JsonPrimitive(function));
        }
        availableJsFunctionsJson = jsonArray.toString();
    } catch (Exception e) {
        CarbonUIMessage.sendCarbonUIMessage("Error occurred while loading SP advanced outbound authentication " +
            "configuration", CarbonUIMessage.ERROR, request, e);
    }
    if (templatesJson == null) {
        templatesJson = "";
    }
    templatesJson = StringEscapeUtils.escapeJavaScript(templatesJson);


      out.write('\n');
      out.write('\n');

    
    StringBuilder idpType = new StringBuilder();
    StringBuilder enabledIdpType = new StringBuilder();
    Map<String, String> idpAuthenticators = new HashMap<String, String>();
    Map<String, String> enabledIdpAuthenticators = new HashMap<String, String>();
    Map<String, Boolean> idpEnableStatus = new HashMap<String, Boolean>();
    Map<String, Boolean> idpAuthenticatorsStatus = new HashMap<String, Boolean>();
    
    if (federatedIdPs != null && federatedIdPs.length > 0) {
        for (IdentityProvider idp : federatedIdPs) {
            idpEnableStatus.put(idp.getIdentityProviderName(), idp.getEnable());
            if (idp.getFederatedAuthenticatorConfigs() != null && idp.getFederatedAuthenticatorConfigs().length > 0) {
                StringBuffer fedAuthenticatorDisplayType = new StringBuffer();
                StringBuffer fedAuthenticatorType = new StringBuffer();
                StringBuffer fedAuthType = new StringBuffer();
                StringBuffer enabledfedAuthType = new StringBuffer();
                
                int i = 1;
                for (FederatedAuthenticatorConfig fedAuth : idp.getFederatedAuthenticatorConfigs()) {
                    if (i == idp.getFederatedAuthenticatorConfigs().length) {
                        fedAuthenticatorDisplayType.append(fedAuth.getDisplayName());
                        fedAuthenticatorType.append(fedAuth.getName());
                    } else {
                        fedAuthenticatorDisplayType.append(fedAuth.getDisplayName()).append("%fed_auth_sep_%");
                        fedAuthenticatorType.append(fedAuth.getName()).append("%fed_auth_sep_%");
                    }
                    
                    fedAuthType.append(startOption).append(Encode.forHtmlAttribute(fedAuth.getName()))
                        .append(middleOption).append(Encode.forHtmlContent(fedAuth.getDisplayName())).append(endOption);
                    if (fedAuth.getEnabled()) {
                        enabledfedAuthType.append(startOption).append(Encode.forHtmlAttribute(fedAuth.getName()))
                            .append(middleOption).append(Encode.forHtmlContent(fedAuth.getDisplayName()))
                            .append(endOption);
                    }
                    idpAuthenticatorsStatus.put(idp.getIdentityProviderName() + "_" + fedAuth.getName(),
                        fedAuth.getEnabled());
                    i++;
                }
                
                idpAuthenticators.put(idp.getIdentityProviderName(), fedAuthType.toString());
                enabledIdpAuthenticators.put(idp.getIdentityProviderName(), enabledfedAuthType.toString());
                
                idpType.append(startOption).append(Encode.forHtmlAttribute(idp.getIdentityProviderName()))
                    .append("\" data=\"").append(Encode.forHtmlAttribute(fedAuthenticatorDisplayType.toString()))
                    .append("\"").append(" data-values=\"")
                    .append(Encode.forHtmlAttribute(fedAuthenticatorType.toString())).append("\" >")
                    .append(Encode.forHtmlContent(idp.getIdentityProviderName())).append(endOption);
                if (idp.getEnable() && enabledfedAuthType.length() > 0) {
                    enabledIdpType.append(startOption).append(Encode.forHtmlAttribute(idp.getIdentityProviderName()))
                        .append("\" data=\"").append(Encode.forHtmlAttribute(fedAuthenticatorDisplayType.toString()))
                        .append("\"").append(" data-values=\"")
                        .append(Encode.forHtmlAttribute(fedAuthenticatorType.toString())).append("\" >")
                        .append(Encode.forHtmlContent(idp.getIdentityProviderName())).append(endOption);
                }
            }
        }
    }
    
    AuthenticationStep[] steps =
        appBean.getServiceProvider().getLocalAndOutBoundAuthenticationConfig().getAuthenticationSteps();
    Map<String, String> stepIdpAuthenticators = new HashMap<String, String>();
    
    if (steps != null && steps.length > 0) {
        for (AuthenticationStep step : steps) {
            IdentityProvider[] stepFedIdps = step.getFederatedIdentityProviders();
            if (stepFedIdps != null && stepFedIdps.length > 0) {
                for (IdentityProvider idp : stepFedIdps) {
                    if (idp == null) continue;
                    FederatedAuthenticatorConfig fedAuth = idp.getDefaultAuthenticatorConfig();
                    String options = idpAuthenticators.get(idp.getIdentityProviderName());
                    if (fedAuth != null && options != null) {
                        String oldOption = startOption + Encode.forHtmlAttribute(fedAuth.getName()) + middleOption + Encode.forHtmlContent(fedAuth.getDisplayName()) + endOption;
                        String newOption = startOption + Encode.forHtmlAttribute(fedAuth.getName()) + "\" selected=\"selected" + middleOption + Encode.forHtmlContent(fedAuth.getDisplayName()) + endOption;
                        if (options.contains(oldOption)) {
                            options = options.replace(oldOption, newOption);
                        } else {
                            options = options + newOption;
                        }
                        stepIdpAuthenticators.put(step.getStepOrder() + "_" + idp.getIdentityProviderName(), options);
                    } else {
                        // No saved Federated Authenticators
                        options = enabledIdpAuthenticators.get(idp.getIdentityProviderName());
                        stepIdpAuthenticators.put(step.getStepOrder() + "_" + idp.getIdentityProviderName(), options);
                    }
                }
            }
        }
    }


      out.write("\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("    function saveAsDefaultAuthSeq() {\n");
      out.write("        checkEmptyEditorContentForDefaultSeq();\n");
      out.write("        if (checkEmptyStep()) {\n");
      out.write("            CARBON.showErrorDialog('Some authentication steps do not have authenticators. Add missing authenticators ' +\n");
      out.write("                'or delete the empty step.',\n");
      out.write("                null, null);\n");
      out.write("            return false;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        if (!checkAuthenticators()) {\n");
      out.write("            CARBON.showErrorDialog('You cannot add identifier as the only authenticator. Add more authenticators or' +\n");
      out.write("                ' add more authentication steps.',\n");
      out.write("                null, null);\n");
      out.write("            return false;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        var showErr = false;\n");
      out.write("        var showWarn = false;\n");
      out.write("\n");
      out.write("        getStepErrorsWarnings($(\".stepWarningListContainer\"), $(\".stepErrorListContainer\"));\n");
      out.write("        getEditorErrorsWarnings($(\".warningListContainer\"), $(\".errorListContainer\"));\n");
      out.write("\n");
      out.write("        if ($(\".messagebox-error-custom li\").length > 0) {\n");
      out.write("            $(\".editor-error-content\").show();\n");
      out.write("            showErr = true;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        if ($(\".messagebox-warning-custom li\").length > 0) {\n");
      out.write("            $(\".editor-warning-content\").show();\n");
      out.write("            showWarn = true;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        if (showErr) {\n");
      out.write("            $(\".err_warn_text\").text('Update script with errors?');\n");
      out.write("            showPopupConfirm($(\".editor-error-warn-container\").html(), \"WSO2 Carbon\", 250, 550, \"OK\", \"Cancel\",\n");
      out.write("                showAddDefaultSeqConfirm, removeHtmlContent);\n");
      out.write("        } else if (showWarn) {\n");
      out.write("            $(\".err_warn_text\").text('Update script with warnings?');\n");
      out.write("            showPopupConfirm($(\".editor-error-warn-container\").html(), \"WSO2 Carbon\", 250, 550, \"OK\", \"Cancel\",\n");
      out.write("                showAddDefaultSeqConfirm, removeHtmlContent);\n");
      out.write("        } else {\n");
      out.write("            showAddDefaultSeqConfirm();\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function showAddDefaultSeqConfirm() {\n");
      out.write("        showPopupConfirmForDefaultAuthSeq($(\"#add_default_AuthSeq\").html(), \"");
      out.print(resourceBundle.getString("save.default.seq"));
      out.write("\",\n");
      out.write("            250, 550, \"");
      out.print(resourceBundle.getString("button.save.default.seq"));
      out.write("\",\n");
      out.write("            \"");
      out.print(resourceBundle.getString("button.cancel.default.seq"));
      out.write("\", saveSequence, null);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function saveSequence() {\n");
      out.write("        var seqDesc = \"\";\n");
      out.write("        $(\".sequence-desc\").each(function () {\n");
      out.write("            if (this.value != \"\") {\n");
      out.write("                seqDesc = $.trim(this.value);\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("        document.getElementById('seqDesc').value = seqDesc;\n");
      out.write("\n");
      out.write("        ");

        String cookie = (String) session.getAttribute(ServerConstants.ADMIN_SERVICE_COOKIE);
        String backendServerURL = CarbonUIUtil.getServerURL(config.getServletContext(), session);
        ConfigurationContext configContext = (ConfigurationContext) config.getServletContext()
                .getAttribute(CarbonConstants.CONFIGURATION_CONTEXT);
         boolean isSeqExists = false;
         if (isSeqExists) { 
      out.write("\n");
      out.write("        CARBON.showConfirmationDialog('");
      out.print(resourceBundle.getString("alert.confirm.override.default.seq"));
      out.write("', saveSeq,\n");
      out.write("            null);\n");
      out.write("        ");
 } else {
        
      out.write("\n");
      out.write("        saveSeq();\n");
      out.write("        ");

        }
        
      out.write("\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function saveSeq() {\n");
      out.write("        $.ajax({\n");
      out.write("            type: \"POST\",\n");
      out.write("            url: 'add-as-default-authSeq.jsp?isSeqExists=");
      out.print(isSeqExists);
      out.write("',\n");
      out.write("            data: $(\"#configure-auth-flow-form\").serialize(),\n");
      out.write("            success: function (data, response, status) {\n");
      out.write("                if (data.match(\"createError\") != null) {\n");
      out.write("                    CARBON.showErrorDialog('");
      out.print(resourceBundle.getString("alert.error.add.default.seq"));
      out.write("');\n");
      out.write("                    return;\n");
      out.write("                } else {\n");
      out.write("                    CARBON.showInfoDialog('");
      out.print(resourceBundle.getString("alert.info.add.default.seq"));
      out.write("');\n");
      out.write("                    return;\n");
      out.write("                }\n");
      out.write("            },\n");
      out.write("            error: function (xhr, ajaxOptions, thrownError) {\n");
      out.write("                CARBON.showErrorDialog('");
      out.print(resourceBundle.getString("alert.error.add.default.seq"));
      out.write("' + xhr.status +\n");
      out.write("                    thrownError);\n");
      out.write("            },\n");
      out.write("            async: false\n");
      out.write("        });\n");
      out.write("    }\n");
      out.write("</script>\n");
      out.write("\n");
      //  fmt:bundle
      org.apache.taglibs.standard.tag.rt.fmt.BundleTag _jspx_th_fmt_005fbundle_005f0 = (org.apache.taglibs.standard.tag.rt.fmt.BundleTag) _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename.get(org.apache.taglibs.standard.tag.rt.fmt.BundleTag.class);
      boolean _jspx_th_fmt_005fbundle_005f0_reused = false;
      try {
        _jspx_th_fmt_005fbundle_005f0.setPageContext(_jspx_page_context);
        _jspx_th_fmt_005fbundle_005f0.setParent(null);
        // /application/configure-authentication-flow.jsp(331,0) name = basename type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_fmt_005fbundle_005f0.setBasename("org.wso2.carbon.identity.application.mgt.ui.i18n.Resources");
        int _jspx_eval_fmt_005fbundle_005f0 = _jspx_th_fmt_005fbundle_005f0.doStartTag();
        if (_jspx_eval_fmt_005fbundle_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          if (_jspx_eval_fmt_005fbundle_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
            out = org.apache.jasper.runtime.JspRuntimeLibrary.startBufferedBody(_jspx_page_context, _jspx_th_fmt_005fbundle_005f0);
          }
          do {
            out.write("\n");
            out.write("    <div id=\"middle\">\n");
            out.write("        <h2>\n");
            out.write("            ");
            if (_jspx_meth_fmt_005fmessage_005f0(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.print(Encode.forHtmlContent(spName));
            out.write("\n");
            out.write("        </h2>\n");
            out.write("        <div id=\"workArea\">\n");
            out.write("            <form id=\"configure-auth-flow-form\" method=\"post\" name=\"configure-auth-flow-form\" method=\"post\"\n");
            out.write("                  action=\"configure-authentication-flow-finish-ajaxprocessor.jsp\">\n");
            out.write("                <input type=hidden name=spName value='");
            out.print(Encode.forHtmlAttribute(spName));
            out.write("'/>\n");
            out.write("\n");
            out.write("\n");
            out.write("                <h2 id=\"authentication_step_config_head\" class=\"sectionSeperator trigger\">\n");
            out.write("                    <a href=\"#\">");
            if (_jspx_meth_fmt_005fmessage_005f1(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("</a>\n");
            out.write("                </h2>\n");
            out.write("\n");
            out.write("                <div class=\"toggle_container sectionSub\" style=\"margin-bottom:10px;\" id=\"stepsConfRow\">\n");
            out.write("                    <table>\n");
            out.write("                        <tr>\n");
            out.write("                            <td><a id=\"stepsAddLink\" class=\"icon-link\"\n");
            out.write("                                   style=\"background-image:url(images/add.gif);margin-left:0\" href=\"#\">");
            if (_jspx_meth_fmt_005fmessage_005f2(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("</a></td>\n");
            out.write("                        </tr>\n");
            out.write("                    </table>\n");
            out.write("                    <div class=\"steps\">\n");
            out.write("\n");
            out.write("                        ");

                            if (steps != null && steps.length > 0) {
                                for (AuthenticationStep step : steps) {
                        
            out.write("\n");
            out.write("\n");
            out.write("                        <h2 id=\"step_head_");
            out.print(step.getStepOrder());
            out.write("\" class=\"sectionSeperator trigger active step_heads\"\n");
            out.write("                            style=\"background-color: beige; clear: both;\">\n");
            out.write("                            <input type=\"hidden\" value=\"");
            out.print(step.getStepOrder());
            out.write("\" name=\"auth_step\" id=\"auth_step\"/>\n");
            out.write("                            <a class=\"step_order_header\" href=\"#\">Step ");
            out.print(step.getStepOrder());
            out.write("\n");
            out.write("                            </a>\n");
            out.write("                            <a href=\"#\" class=\"delete_step icon-link\"\n");
            out.write("                               style=\"background-image: url(images/delete.gif);float:right;width: 9px;\" data-step-no=\"");
            out.print(step.getStepOrder());
            out.write("\"></a>\n");
            out.write("                        </h2>\n");
            out.write("                        <div class=\"toggle_container sectionSub step_contents step_body\" style=\"margin-bottom:10px;display: none;\"\n");
            out.write("                             id=\"step_dev_");
            out.print(step.getStepOrder());
            out.write("\">\n");
            out.write("                            <div style=\"padding-bottom: 5px\">\n");
            out.write("                                <table class=\"carbonFormTable\">\n");
            out.write("                                    <tr>\n");
            out.write("                                        <td><input type=\"checkbox\" style=\"vertical-align: middle;\"\n");
            out.write("                                                   id=\"subject_step_");
            out.print(step.getStepOrder());
            out.write("\"\n");
            out.write("                                                   name=\"subject_step_");
            out.print(step.getStepOrder());
            out.write("\" class=\"subject_steps\"\n");
            out.write("                                                   onclick=\"setSubjectStep(this)\" ");
            out.print(step.getSubjectStep() ? "checked" : "" );
            out.write("><label\n");
            out.write("                                                for=\"subject_step_");
            out.print(step.getStepOrder());
            out.write("\" style=\"cursor: pointer;\">Use\n");
            out.write("                                            subject\n");
            out.write("                                            identifier from this step</label></td>\n");
            out.write("                                    </tr>\n");
            out.write("                                    <tr>\n");
            out.write("                                        <td><input type=\"checkbox\" style=\"vertical-align: middle;\"\n");
            out.write("                                                   id=\"attribute_step_");
            out.print(step.getStepOrder());
            out.write("\"\n");
            out.write("                                                   name=\"attribute_step_");
            out.print(step.getStepOrder());
            out.write("\"\n");
            out.write("                                                   class=\"attribute_steps\"\n");
            out.write("                                                   onclick=\"setAttributeStep(this)\" ");
            out.print(step.getAttributeStep() ? "checked" : "" );
            out.write("><label\n");
            out.write("                                                for=\"attribute_step_");
            out.print(step.getStepOrder());
            out.write("\" style=\"cursor: pointer;\">Use\n");
            out.write("                                            attributes from this step</label></td>\n");
            out.write("                                    </tr>\n");
            out.write("                                </table>\n");
            out.write("                            </div>\n");
            out.write("                            <h2 id=\"local_auth_head_");
            out.print(step.getStepOrder());
            out.write("\" class=\"sectionSeperator trigger active\"\n");
            out.write("                                style=\"background-color: floralwhite;\">\n");
            out.write("                                <a href=\"#\">Local Authenticators</a>\n");
            out.write("                            </h2>\n");
            out.write("                            <div class=\"toggle_container sectionSub\" style=\"margin-bottom:10px;\"\n");
            out.write("                                 id=\"local_auth_head_dev_");
            out.print(step.getStepOrder());
            out.write("\">\n");
            out.write("                                <table class=\"styledLeft auth_table\" width=\"100%\" id=\"local_auth_table_");
            out.print(step.getStepOrder());
            out.write("\">\n");
            out.write("                                    <thead>\n");
            out.write("                                    <tr>\n");
            out.write("                                        <td>\n");
            out.write("                                            <select name=\"step_");
            out.print(step.getStepOrder());
            out.write("_local_oauth_select\"\n");
            out.write("                                                    style=\"float: left; min-width: 150px;font-size:13px;\">\n");
            out.write("                                                ");
            out.print(localAuthTypes.toString());
            out.write("\n");
            out.write("                                            </select>\n");
            out.write("                                            <a id=\"localOptionAddLinkStep_");
            out.print(step.getStepOrder());
            out.write("\"\n");
            out.write("                                               onclick=\"addLocalRow(this,'");
            out.print(step.getStepOrder());
            out.write("');return false;\"\n");
            out.write("                                               class=\"icon-link claimmappingAddLinkss claimMappingAddLinkssLocal\"\n");
            out.write("                                               style=\"background-image:url(images/add.gif);\">Add Authenticator\n");
            out.write("                                            </a>\n");
            out.write("                                        </td>\n");
            out.write("                                    </tr>\n");
            out.write("                                    </thead>\n");
            out.write("                                    ");

                                        LocalAuthenticatorConfig[] lclAuthenticators = step.getLocalAuthenticatorConfigs();

                                        if (lclAuthenticators != null && lclAuthenticators.length > 0) {
                                            int i = 0;
                                            for (LocalAuthenticatorConfig lclAuthenticator : lclAuthenticators) {
                                                if (lclAuthenticator != null) {
                                    
            out.write("\n");
            out.write("                                    <tr>\n");
            out.write("                                        <td>\n");
            out.write("                                            <input name=\"step_");
            out.print(step.getStepOrder());
            out.write("_local_auth\" id=\"\" type=\"hidden\"\n");
            out.write("                                                   value=\"");
            out.print(Encode.forHtmlAttribute(lclAuthenticator.getName()));
            out.write("\"/>\n");
            out.write("                                            ");
            out.print(Encode.forHtmlContent(lclAuthenticator.getDisplayName()));
            out.write("\n");
            out.write("                                        </td>\n");
            out.write("                                        <td class=\"leftCol-small\">\n");
            out.write("                                            <a onclick=\"deleteLocalAuthRow(this);return false;\" href=\"#\"\n");
            out.write("                                               class=\"icon-link\"\n");
            out.write("                                               style=\"background-image: url(images/delete.gif)\"> Delete </a>\n");
            out.write("                                        </td>\n");
            out.write("                                    </tr>\n");
            out.write("                                    ");

                                                }
                                            }
                                        }
                                    
            out.write("\n");
            out.write("                                </table>\n");
            out.write("                            </div>\n");
            out.write("\n");
            out.write("                            ");
if (federatedIdPs != null && federatedIdPs.length > 0 && (enabledIdpType.length() > 0 || (step.getFederatedIdentityProviders() != null && step.getFederatedIdentityProviders().length > 0))) { 
            out.write("\n");
            out.write("                            <h2 id=\"fed_auth_head_");
            out.print(step.getStepOrder());
            out.write("\" class=\"sectionSeperator trigger active\"\n");
            out.write("                                style=\"background-color: floralwhite;\">\n");
            out.write("                                <a href=\"#\">Federated Authenticators</a>\n");
            out.write("                            </h2>\n");
            out.write("\n");
            out.write("                            <div class=\"toggle_container sectionSub\" style=\"margin-bottom:10px;\"\n");
            out.write("                                 id=\"fed_auth_head_dev_");
            out.print(step.getStepOrder());
            out.write("\">\n");
            out.write("                                <table class=\"styledLeft auth_table\" width=\"100%\" id=\"fed_auth_table_");
            out.print(step.getStepOrder());
            out.write("\">\n");
            out.write("                                    <thead>\n");
            out.write("                                    <tr style=\"");
            out.print(enabledIdpType.length() > 0 ? "" : "display:none");
            out.write("\">\n");
            out.write("                                        <td>\n");
            out.write("                                            <select name=\"idpAuthType_");
            out.print(step.getStepOrder());
            out.write("\"\n");
            out.write("                                                    style=\"float: left; min-width: 150px;font-size:13px;\">\n");
            out.write("                                                ");
            out.print(enabledIdpType.toString());
            out.write("\n");
            out.write("                                            </select>\n");
            out.write("                                            <a id=\"claimMappingAddLinkss\"\n");
            out.write("                                               onclick=\"addIDPRow(this,'");
            out.print(step.getStepOrder());
            out.write("');return false;\"\n");
            out.write("                                               class=\"icon-link claimMappingAddLinkssIdp\"\n");
            out.write("                                               style=\"background-image:url(images/add.gif);\">Add Authenticator</a>\n");
            out.write("                                        </td>\n");
            out.write("                                    </tr>\n");
            out.write("                                    </thead>\n");
            out.write("                                    ");


                                        IdentityProvider[] fedIdps = step.getFederatedIdentityProviders();
                                        if (fedIdps != null && fedIdps.length > 0) {
                                            int j = 0;
                                            for (IdentityProvider idp : fedIdps) {
                                                if (idp != null) {
                                    
            out.write("\n");
            out.write("\n");
            out.write("                                    <tr>\n");
            out.write("                                        <td>\n");
            out.write("                                            <input name=\"step_");
            out.print(step.getStepOrder());
            out.write("_fed_auth\" id=\"\" type=\"hidden\"\n");
            out.write("                                                   value=\"");
            out.print(Encode.forHtmlAttribute(idp.getIdentityProviderName()));
            out.write("\"/>\n");
            out.write("                                            ");
            out.print(Encode.forHtmlContent(idp.getIdentityProviderName()) );
            out.write("\n");
            out.write("                                        </td>\n");
            out.write("                                        <td>\n");
            out.write("                                            <select\n");
            out.write("                                                    name=\"step_");
            out.print(step.getStepOrder());
            out.write("_idp_");
            out.print(Encode.forHtmlAttribute(idp.getIdentityProviderName()));
            out.write("_fed_authenticator\"\n");
            out.write("                                                    style=\"float: left; min-width: 150px;font-size:13px;\">");
            out.print(stepIdpAuthenticators.get(step.getStepOrder() + "_" + idp.getIdentityProviderName()));
            out.write("\n");
            out.write("                                            </select>\n");
            out.write("                                        </td>\n");
            out.write("                                        <td class=\"leftCol-small\">\n");
            out.write("                                            <a onclick=\"deleteIDPRow(this);return false;\" href=\"#\" class=\"icon-link\"\n");
            out.write("                                               style=\"background-image: url(images/delete.gif)\"> Delete </a>\n");
            out.write("                                        </td>\n");
            out.write("                                    </tr>\n");
            out.write("                                    ");

                                                }
                                            }
                                        }
                                    
            out.write("\n");
            out.write("                                </table>\n");
            out.write("                            </div>\n");
            out.write("                            ");
 } 
            out.write("\n");
            out.write("\n");
            out.write("                        </div>\n");
            out.write("\n");
            out.write("                        ");
 }
                        } 
            out.write("\n");
            out.write("                    </div>\n");
            out.write("                    <div class=\"script-select-container\" style=\"display: none;\">\n");
            out.write("                        <label class=\"noselect\">\n");
            out.write("                            <input id=\"enableScript\" name=\"enableScript\" type=\"checkbox\" value=\"true\" ");

                                if (appBean.getServiceProvider().getLocalAndOutBoundAuthenticationConfig() != null) {
                                    if (appBean.getServiceProvider().getLocalAndOutBoundAuthenticationConfig().getAuthenticationScriptConfig() != null) {
                                        if (appBean.getServiceProvider().getLocalAndOutBoundAuthenticationConfig()
                                                .getAuthenticationScriptConfig().getEnabled()) { 
            out.write("\n");
            out.write("                                   checked=\"checked\"  ");
 }
                            }
                            }
            out.write("/> Enable Script Based Adaptive Authentication\n");
            out.write("                        </label>\n");
            out.write("                    </div>\n");
            out.write("                </div>\n");
            out.write("\n");
            out.write("                <div style=\"clear:both\"></div>\n");
            out.write("                <!-- sectionSub Div -->\n");
            out.write("                <br/>\n");
            out.write("                <h2 id=\"authentication_step_config_head\" class=\"sectionSeperator trigger active\">\n");
            out.write("                    <a href=\"#\">Script Based Adaptive Authentication</a>\n");
            out.write("                </h2>\n");
            out.write("\n");
            out.write("                <div class=\"toggle_container sectionSub\" id=\"editorRow\">\n");
            out.write("                    <div class=\"err_warn_container\">\n");
            out.write("                        <div class=\"disable_status\">\n");
            out.write("                            <img src=\"images/disabled.png\"><span class=\"disable_text\">Disabled</span>\n");
            out.write("                            <span class=\"show_errors_toggle_buttons\">\n");
            out.write("                                <a href=\"#\">[+] Show Errors</a>\n");
            out.write("                                <a href=\"#\" style=\"display: none;\">[-] Hide Errors</a>\n");
            out.write("                            </span>\n");
            out.write("                        </div>\n");
            out.write("                        <div class=\"err_warn_content\">\n");
            out.write("                            <div class=\"err_container\">\n");
            out.write("                                <img src=\"images/error.gif\" class=\"editor_err_img\"/> <span class=\"err_head\">Errors</span>\n");
            out.write("                                <ul class=\"err_list\"></ul>\n");
            out.write("                            </div>\n");
            out.write("                            <div class=\"warn_container\">\n");
            out.write("                                <img src=\"images/warning.gif\" class=\"editor_warn_img\"/><span class=\"err_head\">Warnings</span>\n");
            out.write("                                <ul class=\"warn_list\"></ul>\n");
            out.write("                            </div>\n");
            out.write("                        </div>\n");
            out.write("                        <div class=\"instruction\">Correct errors and update to enable the script.</div>\n");
            out.write("                    </div>\n");
            out.write("                    <div class=\"warning_container\">\n");
            out.write("                        <span class=\"show_errors_toggle_buttons\">\n");
            out.write("                            <a href=\"#\">[+] Show Warnings</a>\n");
            out.write("                            <a href=\"#\" style=\"display: none;\">[-] Hide Warnings</a>\n");
            out.write("                        </span>\n");
            out.write("                    </div>\n");
            out.write("                    <div class=\"warning_content\">\n");
            out.write("                        <div class=\"warning_container\">\n");
            out.write("                            <img src=\"images/warning.gif\" class=\"editor_warn_img\"/><span class=\"err_head\">Warnings</span>\n");
            out.write("                            <ul class=\"warning_list\"></ul>\n");
            out.write("                        </div>\n");
            out.write("                    </div>\n");
            out.write("                    <div style=\"position: relative;\">\n");
            out.write("                        <div class=\"sectionSub step_contents\" id=\"codeMirror\">\n");
            out.write("<textarea id=\"scriptTextArea\" name=\"scriptTextArea\"\n");
            out.write("          placeholder=\"Write custom JavaScript or select from templates that match a scenario...\"\n");
            out.write("          style=\"height: 500px;width: 100%; display: none;\">");

    if (appBean.getServiceProvider().getLocalAndOutBoundAuthenticationConfig() != null) {
        if (appBean.getServiceProvider().getLocalAndOutBoundAuthenticationConfig().getAuthenticationScriptConfig() != null) {
            out.print(appBean.getServiceProvider().getLocalAndOutBoundAuthenticationConfig().getAuthenticationScriptConfig().getContent());
        }
    }

            out.write("</textarea>\n");
            out.write("                        </div>\n");
            out.write("                        <div id=\"codeMirrorTemplate\" class=\"step_contents\">\n");
            out.write("                            <div class=\"add-template-container vertical-text\">\n");
            out.write("                                <a id=\"addTemplate\" class=\"icon-link noselect\">Templates</a>\n");
            out.write("                            </div>\n");
            out.write("                            <div class=\"template-list-container\">\n");
            out.write("                                <ul id=\"template_list\"></ul>\n");
            out.write("                            </div>\n");
            out.write("                        </div>\n");
            out.write("                    </div>\n");
            out.write("                </div>\n");
            out.write("                <div style=\"clear:both\"></div>\n");
            out.write("                <div class=\"buttonRow\" style=\" margin-top: 10px;\">\n");
            out.write("                    <input id=\"createApp\" type=\"button\" value=\"");
            if (_jspx_meth_fmt_005fmessage_005f3(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("\"/>\n");
            out.write("                    <input style=\"display: none\"type=\"button\"\n");
            out.write("                                               value=\"");
            if (_jspx_meth_fmt_005fmessage_005f4(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("\"\n");
            out.write("                                               onclick=\"saveAsDefaultAuthSeq();\"/>\n");
            out.write("                                        <input type=\"hidden\" name=\"seqDesc\" id=\"seqDesc\"/>\n");
            out.write("                    <input type=\"button\" value=\"");
            if (_jspx_meth_fmt_005fmessage_005f5(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("\"\n");
            out.write("                           onclick=\"javascript:location.href='configure-service-provider.jsp?display=auth_config&spName=");
            out.print(Encode.forUriComponent(spName));
            out.write("'\"/>\n");
            out.write("                </div>\n");
            out.write("            </form>\n");
            out.write("        </div>\n");
            out.write("    </div>\n");
            out.write("    <div class=\"editor-error-warn-container\">\n");
            out.write("        <div class=\"err_warn_text\"></div>\n");
            out.write("        <div class=\"editor-error-content\">\n");
            out.write("            <div class=\"messagebox-error-custom\">\n");
            out.write("                <ul class=\"errorListContainer\"></ul>\n");
            out.write("                <ul class=\"stepErrorListContainer\"></ul>\n");
            out.write("            </div>\n");
            out.write("        </div>\n");
            out.write("        <div class=\"editor-warning-content\">\n");
            out.write("            <div class=\"messagebox-warning-custom\">\n");
            out.write("                <ul class=\"warningListContainer\"></ul>\n");
            out.write("                <ul class=\"stepWarningListContainer\"></ul>\n");
            out.write("            </div>\n");
            out.write("        </div>\n");
            out.write("    </div>\n");
            out.write("    <div id=\"add_default_AuthSeq\" class=\"editor-error-warn-container\" style=\"display: none\">\n");
            out.write("            <br/>\n");
            out.write("            <br/>\n");
            out.write("            <div class=\"sectionSub\">\n");
            out.write("                <table class=\"carbonFormTable\">\n");
            out.write("                    <tr>\n");
            out.write("                        <td style=\"width:15%\" class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f6(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":\n");
            out.write("                        </td>\n");
            out.write("                        <td>\n");
            out.write("                            <textarea style=\"width:50%\" type=\"text\" class=\"sequence-desc\" name=\"sequence-desc\"\n");
            out.write("                                      id=\"sequence-desc\" class=\"text-box-big\"></textarea>\n");
            out.write("                            <div class=\"sectionHelp\">");
            if (_jspx_meth_fmt_005fmessage_005f7(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("</div>\n");
            out.write("                        </td>\n");
            out.write("                    </tr>\n");
            out.write("                </table>\n");
            out.write("            </div>\n");
            out.write("        </div>\n");
            int evalDoAfterBody = _jspx_th_fmt_005fbundle_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
          if (_jspx_eval_fmt_005fbundle_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
            out = _jspx_page_context.popBody();
          }
        }
        if (_jspx_th_fmt_005fbundle_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
        _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename.reuse(_jspx_th_fmt_005fbundle_005f0);
        _jspx_th_fmt_005fbundle_005f0_reused = true;
      } finally {
        org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fbundle_005f0, _jsp_getInstanceManager(), _jspx_th_fmt_005fbundle_005f0_reused);
      }
      out.write("\n");
      out.write("\n");
      out.write("<script id=\"template-info\" type=\"text/x-handlebars-template\">\n");
      out.write("    <div id='messagebox-template-summary' class=\"messagebox-info-custom\">\n");
      out.write("        <h2>{{title}}</h2>\n");
      out.write("        <br/>\n");
      out.write("        {{#if summary}}\n");
      out.write("        <p>{{summary}}</p>\n");
      out.write("        <br/>\n");
      out.write("        {{/if}}\n");
      out.write("        {{#if preRequisites}}\n");
      out.write("        <h3>Prerequisites</h3>\n");
      out.write("        <ul>\n");
      out.write("            {{#each preRequisites}}\n");
      out.write("            <li>{{this}}</li>\n");
      out.write("            {{/each}}\n");
      out.write("        </ul>\n");
      out.write("        <br/>\n");
      out.write("        {{/if}}\n");
      out.write("        {{#if parametersDescription}}\n");
      out.write("        <h3>Parameters</h3>\n");
      out.write("        <table>\n");
      out.write("            <tbody>\n");
      out.write("            {{#each parametersDescription}}\n");
      out.write("            <tr>\n");
      out.write("                <td><i>{{@key}}</i></td>\n");
      out.write("                <td>{{this}}</td>\n");
      out.write("            </tr>\n");
      out.write("            {{/each}}\n");
      out.write("            </tbody>\n");
      out.write("        </table>\n");
      out.write("        <br/>\n");
      out.write("        {{/if}}\n");
      out.write("        {{#if defaultStepsDescription}}\n");
      out.write("        <h3>Default Steps</h3>\n");
      out.write("        <ul>\n");
      out.write("            {{#each defaultStepsDescription}}\n");
      out.write("            <li>{{@key}} : {{this}}</li>\n");
      out.write("            {{/each}}\n");
      out.write("        </ul>\n");
      out.write("        <br/>\n");
      out.write("        {{/if}}\n");
      out.write("        {{#if helpLink}}\n");
      out.write("        <h3>Help/Reference</h3>\n");
      out.write("        <a href=\"{{helpLink}}\" target=\"_blank\">{{helpLink}}</a>\n");
      out.write("        <br/>\n");
      out.write("        {{/if}}\n");
      out.write("        {{#if code}}\n");
      out.write("        <br/>\n");
      out.write("        <h3>Code</h3>\n");
      out.write("        <br/>\n");
      out.write("        <textarea  id=\"codesnippet_readonly\" name=\"codesnippet_readonly\"></textarea>\n");
      out.write("        <br/>\n");
      out.write("        {{/if}}\n");
      out.write("    </div>\n");
      out.write("</script>\n");
      out.write("<script>\n");
      out.write("    var authMap = {};\n");
      out.write("    var conditionalAuthFunctions = $.parseJSON('");
      out.print(availableJsFunctionsJson);
      out.write("');\n");
      out.write("    var localAuthenticators = [];\n");
      out.write("    var localHandlers = [];\n");
      out.write("\n");
      out.write("    ");

    if (localAuthenticatorConfigs != null && localAuthenticatorConfigs.length > 0) {
        for (LocalAuthenticatorConfig auth : localAuthenticatorConfigs) {
        
      out.write("\n");
      out.write("            localAuthenticators.push('");
      out.print(auth.getName());
      out.write("');\n");
      out.write("        ");

            Property[] props = auth.getProperties();
             if (props != null && props.length > 0) {
                for (Property pro : props) {
                    if ((IS_HANDLER.equals(pro.getName()) && Boolean.valueOf(pro.getValue()))) {
                        
      out.write("\n");
      out.write("                            localHandlers.push('");
      out.print(auth.getName());
      out.write("');\n");
      out.write("                        ");

                    }
                }
            }
        }
    }
    
      out.write("\n");
      out.write("    var stepOrder = 0;\n");
      out.write("    ");
if(steps != null){
      out.write("\n");
      out.write("    var stepOrder = ");
      out.print(steps.length);
      out.write(";\n");
      out.write("    ");
} else {
      out.write("\n");
      out.write("    var stepOrder = 0;\n");
      out.write("    var img = \"\";\n");
      out.write("    ");
}
      out.write("\n");
      out.write("    var templates = $.parseJSON('");
      out.print(templatesJson);
      out.write("');\n");
      out.write("\n");
      out.write("    function addNewUIStep(){\n");
      out.write("        stepOrder++;\n");
      out.write("        jQuery('#stepsConfRow .steps').append(jQuery('<h2 id=\"step_head_' + stepOrder +\n");
      out.write("            '\" class=\"sectionSeperator trigger active step_heads\" style=\"background-color: beige; clear: both;\"><input type=\"hidden\" value=\"' + stepOrder + '\" name=\"auth_step\" id=\"auth_step\"><a class=\"step_order_header\" href=\"#\">Step ' + stepOrder + '</a><a href=\"#\" class=\"delete_step icon-link\" data-step-no=\"' + stepOrder + '\" style=\"background-image: url(images/delete.gif);float:right;width: 9px;\"></a></h2><div class=\"toggle_container sectionSub step_contents step_body\" style=\"margin-bottom:10px;\" id=\"step_dev_' + stepOrder + '\"> <div style=\"padding-bottom: 5px\"><table class=\"carbonFormTable\"><tr><td><input type=\"checkbox\" style=\"vertical-align: middle;\" id=\"subject_step_' + stepOrder + '\" name=\"subject_step_' + stepOrder + '\" class=\"subject_steps\" onclick=\"setSubjectStep(this)\"><label for=\"subject_step_' + stepOrder + '\" style=\"cursor: pointer;\">Use subject identifier from this step</label></td></tr><tr><td><input type=\"checkbox\" style=\"vertical-align: middle;\" id=\"attribute_step_' + stepOrder + '\" name=\"attribute_step_' + stepOrder + '\" class=\"attribute_steps\" onclick=\"setAttributeStep(this)\" ><label for=\"attribute_step_' + stepOrder + '\" style=\"cursor: pointer;\">Use attributes from this step</label></td></tr></table></div><h2 id=\"local_auth_head_' + stepOrder + '\" class=\"sectionSeperator trigger active\" style=\"background-color: floralwhite;\"><a href=\"#\">Local Authenticators</a></h2><div class=\"toggle_container sectionSub\" style=\"margin-bottom:10px;\" id=\"local_auth_head_dev_' + stepOrder + '\"><table class=\"styledLeft auth_table\" width=\"100%\" id=\"local_auth_table_' + stepOrder + '\"><thead><tr><td><select name=\"step_' + stepOrder + '_local_oauth_select\" style=\"float: left; min-width: 150px;font-size:13px;\">");
      out.print(localAuthTypes.toString());
      out.write("</select><a id=\"localOptionAddLinkStep_' + stepOrder + '\" onclick=\"addLocalRow(this,' + stepOrder + ');return false;\" class=\"icon-link claimMappingAddLinkss claimMappingAddLinkssLocal\" style=\"background-image:url(images/add.gif);\">Add Authenticator</a></td></tr></thead></table> </div>");
if (enabledIdpType.length() > 0) { 
      out.write(" <h2 id=\"fed_auth_head_' + stepOrder + '\" class=\"sectionSeperator trigger active\" style=\"background-color: floralwhite;\"><a href=\"#\">Federated Authenticators</a></h2><div class=\"toggle_container sectionSub\" style=\"margin-bottom:10px;\" id=\"fed_auth_head_dev_' + stepOrder + '\"><table class=\"styledLeft auth_table\" width=\"100%\" id=\"fed_auth_table_' + stepOrder + '\"><thead> <tr><td><select name=\"idpAuthType_' + stepOrder + '\" style=\"float: left; min-width: 150px;font-size:13px;\">");
      out.print(enabledIdpType.toString());
      out.write("</select><a id=\"claimMappingAddLinkss\" onclick=\"addIDPRow(this,' + stepOrder + ');return false;\" class=\"icon-link claimMappingAddLinkssIdp\" style=\"background-image:url(images/add.gif);\">Add Authenticator</a></td></tr></thead></table></div>");
}
      out.write("</div>'));\n");
      out.write("        if (!$('#stepsConfRow').is(\":visible\")) {\n");
      out.write("            $(jQuery('#stepsConfRow')).toggle();\n");
      out.write("        }\n");
      out.write("        if (stepOrder == 1) {\n");
      out.write("            $('#subject_step_' + stepOrder).attr('checked', true);\n");
      out.write("            $('#attribute_step_' + stepOrder).attr('checked', true);\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("</script>\n");
      out.write("<script src=\"./js/configure-authentication-flow.js\"></script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_fmt_005fmessage_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f0 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f0_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f0.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /application/configure-authentication-flow.jsp(334,12) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f0.setKey("breadcrumb.advanced.auth.step.config.for");
      int _jspx_eval_fmt_005fmessage_005f0 = _jspx_th_fmt_005fmessage_005f0.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f0);
      _jspx_th_fmt_005fmessage_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f0, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f1 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f1_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f1.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /application/configure-authentication-flow.jsp(343,32) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f1.setKey("title.config.authentication.steps");
      int _jspx_eval_fmt_005fmessage_005f1 = _jspx_th_fmt_005fmessage_005f1.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f1);
      _jspx_th_fmt_005fmessage_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f1, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f2(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f2 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f2_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f2.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /application/configure-authentication-flow.jsp(350,103) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f2.setKey("button.add.step");
      int _jspx_eval_fmt_005fmessage_005f2 = _jspx_th_fmt_005fmessage_005f2.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f2);
      _jspx_th_fmt_005fmessage_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f2, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f2_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f3(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f3 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f3_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f3.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f3.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /application/configure-authentication-flow.jsp(584,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f3.setKey("button.update.service.provider");
      int _jspx_eval_fmt_005fmessage_005f3 = _jspx_th_fmt_005fmessage_005f3.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f3);
      _jspx_th_fmt_005fmessage_005f3_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f3, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f3_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f4(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f4 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f4_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f4.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f4.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /application/configure-authentication-flow.jsp(586,54) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f4.setKey("button.save.as.default.seq");
      int _jspx_eval_fmt_005fmessage_005f4 = _jspx_th_fmt_005fmessage_005f4.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f4.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f4);
      _jspx_th_fmt_005fmessage_005f4_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f4, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f4_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f5(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f5 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f5_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f5.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f5.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /application/configure-authentication-flow.jsp(589,48) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f5.setKey("button.cancel");
      int _jspx_eval_fmt_005fmessage_005f5 = _jspx_th_fmt_005fmessage_005f5.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f5.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f5);
      _jspx_th_fmt_005fmessage_005f5_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f5, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f5_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f6(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f6 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f6_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f6.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f6.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /application/configure-authentication-flow.jsp(616,77) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f6.setKey("config.default.seq.desc");
      int _jspx_eval_fmt_005fmessage_005f6 = _jspx_th_fmt_005fmessage_005f6.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f6.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f6);
      _jspx_th_fmt_005fmessage_005f6_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f6, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f6_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f7(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f7 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f7_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f7.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f7.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /application/configure-authentication-flow.jsp(621,53) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f7.setKey("help.default.seq.desc");
      int _jspx_eval_fmt_005fmessage_005f7 = _jspx_th_fmt_005fmessage_005f7.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f7.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f7);
      _jspx_th_fmt_005fmessage_005f7_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f7, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f7_reused);
    }
    return false;
  }
}
