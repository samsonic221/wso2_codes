/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.31
 * Generated at: 2020-07-29 13:41:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.idpmgt;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.axis2.context.ConfigurationContext;
import org.apache.commons.lang.StringUtils;
import org.owasp.encoder.Encode;
import org.wso2.carbon.CarbonConstants;
import org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig;
import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider;
import org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProviderProperty;
import org.wso2.carbon.identity.application.common.model.idp.xsd.Property;
import org.wso2.carbon.identity.application.common.model.idp.xsd.ProvisioningConnectorConfig;
import org.wso2.carbon.identity.application.common.util.IdentityApplicationConstants;
import org.wso2.carbon.identity.governance.stub.bean.ConnectorConfig;
import org.wso2.carbon.idp.mgt.ui.client.IdentityGovernanceAdminClient;
import org.wso2.carbon.idp.mgt.ui.util.IdPManagementUIUtil;
import org.wso2.carbon.ui.CarbonUIUtil;
import org.wso2.carbon.utils.ServerConstants;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;

public final class idp_002dmgt_002dedit_002dlocal_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/tlds/carbontags.tld", Long.valueOf(1582879640000L));
    _jspx_dependants.put("/WEB-INF/tlds/fmt.tld", Long.valueOf(1582879640000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.apache.commons.lang.StringUtils");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.common.model.idp.xsd.ProvisioningConnectorConfig");
    _jspx_imports_classes.add("org.wso2.carbon.idp.mgt.ui.util.IdPManagementUIUtil");
    _jspx_imports_classes.add("org.apache.axis2.context.ConfigurationContext");
    _jspx_imports_classes.add("org.wso2.carbon.identity.governance.stub.bean.ConnectorConfig");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.common.model.idp.xsd.Property");
    _jspx_imports_classes.add("org.wso2.carbon.idp.mgt.ui.client.IdentityGovernanceAdminClient");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProvider");
    _jspx_imports_classes.add("org.wso2.carbon.ui.CarbonUIUtil");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.common.model.idp.xsd.FederatedAuthenticatorConfig");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.owasp.encoder.Encode");
    _jspx_imports_classes.add("java.util.ResourceBundle");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.common.util.IdentityApplicationConstants");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("org.wso2.carbon.utils.ServerConstants");
    _jspx_imports_classes.add("org.wso2.carbon.CarbonConstants");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.common.model.idp.xsd.IdentityProviderProperty");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fcarbon_005fbreadcrumb_0026_005ftopPage_005fresourceBundle_005frequest_005flabel_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fcarbon_005fbreadcrumb_0026_005ftopPage_005fresourceBundle_005frequest_005flabel_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fcarbon_005fbreadcrumb_0026_005ftopPage_005fresourceBundle_005frequest_005flabel_005fnobody.release();
    _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename.release();
    _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!--\n");
      out.write("~ Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n");
      out.write("~\n");
      out.write("~ WSO2 Inc. licenses this file to you under the Apache License,\n");
      out.write("~ Version 2.0 (the \"License\"); you may not use this file except\n");
      out.write("~ in compliance with the License.\n");
      out.write("~ You may obtain a copy of the License at\n");
      out.write("~\n");
      out.write("~ http://www.apache.org/licenses/LICENSE-2.0\n");
      out.write("~\n");
      out.write("~ Unless required by applicable law or agreed to in writing,\n");
      out.write("~ software distributed under the License is distributed on an\n");
      out.write("~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n");
      out.write("~ KIND, either express or implied. See the License for the\n");
      out.write("~ specific language governing permissions and limitations\n");
      out.write("~ under the License.\n");
      out.write("-->\n");
      out.write("\n");
      //  carbon:breadcrumb
      org.wso2.carbon.ui.taglibs.Breadcrumb _jspx_th_carbon_005fbreadcrumb_005f0 = (org.wso2.carbon.ui.taglibs.Breadcrumb) _005fjspx_005ftagPool_005fcarbon_005fbreadcrumb_0026_005ftopPage_005fresourceBundle_005frequest_005flabel_005fnobody.get(org.wso2.carbon.ui.taglibs.Breadcrumb.class);
      boolean _jspx_th_carbon_005fbreadcrumb_005f0_reused = false;
      try {
        _jspx_th_carbon_005fbreadcrumb_005f0.setPageContext(_jspx_page_context);
        _jspx_th_carbon_005fbreadcrumb_005f0.setParent(null);
        // /idpmgt/idp-mgt-edit-local.jsp(43,0) name = label type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_carbon_005fbreadcrumb_005f0.setLabel("identity.providers");
        // /idpmgt/idp-mgt-edit-local.jsp(43,0) name = resourceBundle type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_carbon_005fbreadcrumb_005f0.setResourceBundle("org.wso2.carbon.idp.mgt.ui.i18n.Resources");
        // /idpmgt/idp-mgt-edit-local.jsp(43,0) name = topPage type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_carbon_005fbreadcrumb_005f0.setTopPage(true);
        // /idpmgt/idp-mgt-edit-local.jsp(43,0) name = request type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_carbon_005fbreadcrumb_005f0.setRequest(request);
        int _jspx_eval_carbon_005fbreadcrumb_005f0 = _jspx_th_carbon_005fbreadcrumb_005f0.doStartTag();
        if (_jspx_th_carbon_005fbreadcrumb_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
        _005fjspx_005ftagPool_005fcarbon_005fbreadcrumb_0026_005ftopPage_005fresourceBundle_005frequest_005flabel_005fnobody.reuse(_jspx_th_carbon_005fbreadcrumb_005f0);
        _jspx_th_carbon_005fbreadcrumb_005f0_reused = true;
      } finally {
        org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_carbon_005fbreadcrumb_005f0, _jsp_getInstanceManager(), _jspx_th_carbon_005fbreadcrumb_005f0_reused);
      }
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../dialog/display_messages.jsp", out, false);
      out.write("<script type=\"text/javascript\" src=\"../admin/js/main.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"../identity/validation/js/identity-validate.js\"></script>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("    function setBooleanValueToTextBox(element) {\n");
      out.write("        document.getElementById(element.value).value = element.checked;\n");
      out.write("    }\n");
      out.write("</script>\n");

    IdentityProvider residentIdentityProvider = (IdentityProvider) session.getAttribute("ResidentIdentityProvider");
    if (residentIdentityProvider == null) {

      out.write("<script type=\"text/javascript\">\n");
      out.write("    location.href = \"idp-mgt-edit-load-local.jsp\";\n");
      out.write("</script>\n");

} else {
    String DEFAULT = "DEFAULT";
    String cookie = (String) session.getAttribute(ServerConstants.ADMIN_SERVICE_COOKIE);
    String backendServerURL = CarbonUIUtil.getServerURL(config.getServletContext(), session);
    final String governanceAdminServiceClass = "org.wso2.carbon.identity.governance.IdentityGovernanceAdminService";
    ConfigurationContext configContext = (ConfigurationContext) config.getServletContext()
            .getAttribute(CarbonConstants.CONFIGURATION_CONTEXT);
    IdentityGovernanceAdminClient client = new IdentityGovernanceAdminClient(cookie, backendServerURL, configContext);
    Map<String, Map<String, List<ConnectorConfig>>> catMap = new HashMap<String, Map<String, List<ConnectorConfig>>>();
    try {
        Class.forName(governanceAdminServiceClass);
        catMap = client.getConnectorList();
    } catch (ClassNotFoundException e) {
        // Fix APIMANAGER-5713 - issue due to removing jars of admin service
        // Intentionally skipping handling the exception for class not found for admin service.
    }

    String homeRealmId = residentIdentityProvider.getHomeRealmId();
    String openidUrl = null;
    String idPEntityId = null;
    String samlSSOUrl = null;
    String samlSLOUrl = null;
    String samlECPUrl = null;
    String samlArtifactUrl = null;
    String oauth1RequestTokenUrl = null;
    String oauth1AuthorizeUrl = null;
    String oauth1AccessTokenUrl = null;
    String authzUrl = null;
    String tokenUrl = null;
    String revokeUrl = null;
    String introspectUrl = null;
    String userInfoUrl = null;
    String oidcCheckSessionEndpoint = null;
    String oidcLogoutEndpoint = null;
    String passiveSTSUrl = null;
    String passivestsIdPEntityId = null;
    String oidcIdpEntityId = null;
    String stsUrl = null;
    String sessionIdleTimeout = null;
    String rememberMeTimeout = null;
    String oidcWebFingerEndpoint = null;
    String oauth2DcrEndpoint = null;
    String oauth2JwksEndpoint = null;
    String oidcDiscoveryEndpoint = null;
    String category = request.getParameter("category");
    String subCategory = request.getParameter("subCategory");
    String samlMetadataValidityPeriod = null;
    boolean samlMetadataSigningEnabled = false;
    String samlMetadataSigningEnabledChecked = "";
    boolean samlAuthnRequestsSigningEnabled = false;
    String samlAuthnRequestsSigningChecked = "";

    List<Property> destinationURLList = new ArrayList<Property>();
    FederatedAuthenticatorConfig[] federatedAuthenticators = residentIdentityProvider.getFederatedAuthenticatorConfigs();
    for(FederatedAuthenticatorConfig federatedAuthenticator : federatedAuthenticators){
        Property[] properties = federatedAuthenticator.getProperties();
        if(IdentityApplicationConstants.Authenticator.OpenID.NAME.equals(federatedAuthenticator.getName())){
            openidUrl = IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.Authenticator.OpenID.OPEN_ID_URL).getValue();
        } else if(IdentityApplicationConstants.Authenticator.SAML2SSO.NAME.equals(federatedAuthenticator.getName())){
            idPEntityId = IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.Authenticator.SAML2SSO.IDP_ENTITY_ID).getValue();
            samlSSOUrl = IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.Authenticator.SAML2SSO.SSO_URL).getValue();
            samlSLOUrl = IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.Authenticator.SAML2SSO.LOGOUT_REQ_URL).getValue();
            samlECPUrl = IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.Authenticator.SAML2SSO.ECP_URL).getValue();
            samlArtifactUrl = IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.Authenticator.SAML2SSO.ARTIFACT_RESOLVE_URL).getValue();
            destinationURLList = IdPManagementUIUtil.getPropertySetStartsWith(properties,
                    IdentityApplicationConstants.Authenticator.SAML2SSO.DESTINATION_URL_PREFIX);
            if (destinationURLList.size() == 0) {
                destinationURLList.add(IdPManagementUIUtil.getProperty(properties,
                        IdentityApplicationConstants.Authenticator.SAML2SSO.SSO_URL));
            }
            samlMetadataValidityPeriod = IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.Authenticator.SAML2SSO.SAML_METADATA_VALIDITY_PERIOD).getValue();
            samlMetadataSigningEnabled = Boolean.parseBoolean(IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.Authenticator.SAML2SSO.SAML_METADATA_SIGNING_ENABLED).getValue());
            if (samlMetadataSigningEnabled) {
                samlMetadataSigningEnabledChecked = "checked=\'checked\'";
            }
             samlAuthnRequestsSigningEnabled = Boolean.parseBoolean(IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.Authenticator.SAML2SSO.SAML_METADATA_AUTHN_REQUESTS_SIGNING_ENABLED).getValue());
             if (samlAuthnRequestsSigningEnabled) {
                 samlAuthnRequestsSigningChecked = "checked=\'checked\'";
             }
        } else if(IdentityApplicationConstants.OAuth10A.NAME.equals(federatedAuthenticator.getName())) {
            oauth1RequestTokenUrl = IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.OAuth10A.OAUTH1_REQUEST_TOKEN_URL).getValue();
            oauth1AuthorizeUrl = IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.OAuth10A.OAUTH1_AUTHORIZE_URL).getValue();
            oauth1AccessTokenUrl = IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.OAuth10A.OAUTH1_ACCESS_TOKEN_URL).getValue();
        } else if(IdentityApplicationConstants.Authenticator.OIDC.NAME.equals(federatedAuthenticator.getName())){
            oidcIdpEntityId = IdPManagementUIUtil.getProperty(properties, "IdPEntityId").getValue();
            authzUrl = IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.Authenticator.OIDC.OAUTH2_AUTHZ_URL).getValue();
            tokenUrl = IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.Authenticator.OIDC.OAUTH2_TOKEN_URL).getValue();
            revokeUrl = IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.Authenticator.OIDC.OAUTH2_REVOKE_URL).getValue();
            introspectUrl = IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.Authenticator.OIDC.OAUTH2_INTROSPECT_URL).getValue();
            userInfoUrl = IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.Authenticator.OIDC.OAUTH2_USER_INFO_EP_URL).getValue();
            oidcCheckSessionEndpoint = IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.Authenticator.OIDC.OIDC_CHECK_SESSION_URL).getValue();
            oidcLogoutEndpoint = IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.Authenticator.OIDC.OIDC_LOGOUT_URL).getValue();
            oidcWebFingerEndpoint = IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.Authenticator.OIDC.OIDC_WEB_FINGER_EP_URL).getValue();
            oauth2DcrEndpoint = IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.Authenticator.OIDC.OAUTH2_DCR_EP_URL).getValue();
            oauth2JwksEndpoint = IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.Authenticator.OIDC.OAUTH2_JWKS_EP_URL).getValue();
            oidcDiscoveryEndpoint = IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.Authenticator.OIDC.OIDC_DISCOVERY_EP_URL).getValue();
        } else if(IdentityApplicationConstants.Authenticator.PassiveSTS.NAME.equals(federatedAuthenticator.getName())){
            passiveSTSUrl = IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.Authenticator.PassiveSTS.IDENTITY_PROVIDER_URL).getValue();
            passivestsIdPEntityId = IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.Authenticator.PassiveSTS.IDENTITY_PROVIDER_ENTITY_ID).getValue();
        } else if(IdentityApplicationConstants.Authenticator.WSTrust.NAME.equals(federatedAuthenticator.getName())){
            stsUrl = IdPManagementUIUtil.getProperty(properties,
                    IdentityApplicationConstants.Authenticator.WSTrust.IDENTITY_PROVIDER_URL).getValue();
        }
    }
    String scimUserEp = null;
    String scimGroupEp = null;
    String scim2UserEp = null;
    String scim2GroupEp = null;
    ProvisioningConnectorConfig[] provisioningConnectors = residentIdentityProvider.getProvisioningConnectorConfigs();
    for(ProvisioningConnectorConfig provisioningConnector : provisioningConnectors){
        if(provisioningConnector.getName().equals("scim")){
            Property[] provisioningProperties = provisioningConnector.getProvisioningProperties();
            if(provisioningProperties == null){
                provisioningProperties = new Property[0];
            }
            for(Property property : provisioningProperties){
                if (property.getName().equals("scimUserEndpoint")) {
                    scimUserEp = property.getValue();
                } else if(property.getName().equals("scimGroupEndpoint")) {
                    scimGroupEp = property.getValue();
                } else if(property.getName().equals("scim2UserEndpoint")) {
                    scim2UserEp = property.getValue();
                } else if(property.getName().equals("scim2GroupEndpoint")) {
                    scim2GroupEp = property.getValue();
                }
            }
        }
    }

    IdentityProviderProperty[] idpProperties = residentIdentityProvider.getIdpProperties();
    if (idpProperties != null) {
        for (IdentityProviderProperty property : idpProperties) {
            if (property.getName().equals(IdentityApplicationConstants.SESSION_IDLE_TIME_OUT)) {
                sessionIdleTimeout = property.getValue();
            } else if (property.getName().equals(IdentityApplicationConstants.REMEMBER_ME_TIME_OUT)) {
                rememberMeTimeout = property.getValue();
            }
        }
    }

    session.setAttribute("returnToPath", "../idpmgt/idp-mgt-edit-local.jsp");
    session.setAttribute("cancelLink", "../idpmgt/idp-mgt-edit-local.jsp");
    session.setAttribute("backLink", "../idpmgt/idp-mgt-edit-local.jsp");

      String BUNDLE = "org.wso2.carbon.idp.mgt.ui.i18n.Resources";
      ResourceBundle resourceBundle = ResourceBundle.getBundle(BUNDLE, request.getLocale());

      out.write("<script>\n");
      out.write("\n");
      out.write("\n");
      out.write("jQuery(document).ready(function(){\n");
      out.write("\n");
      out.write("    jQuery('h2.trigger').click(function(){\n");
      out.write("        if (jQuery(this).next().is(\":visible\")) {\n");
      out.write("            this.className = \"active trigger\";\n");
      out.write("        } else {\n");
      out.write("            this.className = \"trigger\";\n");
      out.write("        }\n");
      out.write("        jQuery(this).next().slideToggle(\"fast\");\n");
      out.write("        return false; //Prevent the browser jump to the link anchor\n");
      out.write("    })\n");
      out.write("\n");
      out.write("})\n");
      out.write("\n");
      out.write("    initSections(\"\");\n");
      out.write("function idpMgtUpdate() {\n");
      out.write("    if(doValidation()){\n");
      out.write("        jQuery('#idp-mgt-edit-local-form').submit();\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("function idpMgtCancel(){\n");
      out.write("        location.href = \"idp-mgt-list.jsp\"\n");
      out.write("    }\n");
      out.write("    function doValidation() {\n");
      out.write("        var reason = \"\";\n");
      out.write("        reason = validateAttribute(\"homeRealmId\");\n");
      out.write("        if (reason != \"\") {\n");
      out.write("            CARBON.showWarningDialog(\"Resident Home Realm ID cannot be empty\");\n");
      out.write("            return false;\n");
      out.write("        }\n");
      out.write("        reason = validateAttribute(\"idPEntityId\");\n");
      out.write("        if (reason != \"\") {\n");
      out.write("            CARBON.showWarningDialog(\"Resident IdP Entity ID cannot be empty\");\n");
      out.write("            return false;\n");
      out.write("        }\n");
      out.write("        var isSessionTimeoutValidated = doValidateInput(document.getElementById('sessionIdleTimeout'), \"Resident IdP Idle Session Timeout must be numeric value greater than 0\");\n");
      out.write("        if (!isSessionTimeoutValidated) {\n");
      out.write("            return false;\n");
      out.write("        }\n");
      out.write("        var isRememberTimeValidated = doValidateInput(document.getElementById('rememberMeTimeout'), \"Resident IdP Remember Me Period must be numeric value greater than 0\");\n");
      out.write("        if (!isRememberTimeValidated) {\n");
      out.write("            return false;\n");
      out.write("        }\n");
      out.write("        var isSamlMetadataValidityPeriodValidated = doValidateInput(document.getElementById('samlMetadataValidityPeriod'),\n");
      out.write("            \"SAML metadata validity period must be numeric value greater than 0\");\n");
      out.write("        if (!isSamlMetadataValidityPeriodValidated) {\n");
      out.write("            return false;\n");
      out.write("        }\n");
      out.write("        var isSSOUrlValidated = doValidateInput(document.getElementById('samlSSOUrl'), \"Please enter a valid SSO URL\");\n");
      out.write("        if (!isSSOUrlValidated) {\n");
      out.write("            return false;\n");
      out.write("        }\n");
      out.write("        var issamlSLOUrlValidated = doValidateInput(document.getElementById('samlSLOUrl'), \"Please enter a valid Logout Url\");\n");
      out.write("        if (!issamlSLOUrlValidated) {\n");
      out.write("            return false;\n");
      out.write("        }\n");
      out.write("        return true;\n");
      out.write("    }\n");
      out.write("     function validateAttribute(attributeName) {\n");
      out.write("            var attribute = document.getElementsByName(attributeName)[0];\n");
      out.write("            var error = \"\";\n");
      out.write("            var value = attribute.value;\n");
      out.write("            if (value.length == 0) {\n");
      out.write("                error = attribute.name + \" \";\n");
      out.write("                return error;\n");
      out.write("            }\n");
      out.write("            value = value.replace(/^\\s+/, \"\") ;\n");
      out.write("            if (value.length == 0) {\n");
      out.write("                error = attribute.name + \" contains only spaces\";\n");
      out.write("                return error;\n");
      out.write("            }\n");
      out.write("            return error;\n");
      out.write("     }\n");
      out.write("\n");
      out.write("    function onClickAddDestinationUrl() {\n");
      out.write("        var isValidated = doValidateInput(document.getElementById('destinationURLTxt'), \"Please enter a valid destination\");\n");
      out.write("        if (isValidated) {\n");
      out.write("            addDestinationURL();\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("    function addDestinationURL() {\n");
      out.write("\n");
      out.write("        var destinationURL = $(\"#destinationURLTxt\").val();\n");
      out.write("        if (destinationURL == null || destinationURL.trim().length == 0) {\n");
      out.write("            CARBON.showWarningDialog(\"Please enter a valid destination\");\n");
      out.write("            return false;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        destinationURL = destinationURL.trim();\n");
      out.write("\n");
      out.write("        if (!$(\"#destinationURLTblRow\").length) {\n");
      out.write("            var row = '<tr id=\"destinationURLTblRow\">' +\n");
      out.write("                    '    <td></td>' +\n");
      out.write("                    '    <td>' +\n");
      out.write("                    '        <table id=\"destinationURLsTable\" style=\"width: 40%; margin-bottom: 3px;\" class=\"styledInner\">' +\n");
      out.write("                    '            <tbody id=\"destinationURLsTableBody\">' +\n");
      out.write("                    '            </tbody>' +\n");
      out.write("                    '        </table>' +\n");
      out.write("                    '        <input type=\"hidden\" id=\"destinationURLs\" name=\"destinationURLs\" value=\"\">' +\n");
      out.write("                    '        <input type=\"hidden\" id=\"currentColumnId\" value=\"0\">' +\n");
      out.write("                    '    </td>' +\n");
      out.write("                    '</tr>';\n");
      out.write("            $('#destinationURLInputRow').after(row);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        var destinationURLs = $(\"#destinationURLs\").val();\n");
      out.write("        var currentColumnId = $(\"#currentColumnId\").val();\n");
      out.write("        if (destinationURLs == null || destinationURLs.trim().length == 0) {\n");
      out.write("            $(\"#destinationURLs\").val(destinationURL);\n");
      out.write("            var row =\n");
      out.write("                    '<tr id=\"destinationUrl_' + parseInt(currentColumnId) + '\">' +\n");
      out.write("                    '</td><td style=\"padding-left: 15px !important; color: rgb(119, 119, 119);font-style: italic;\">' + destinationURL +\n");
      out.write("                    '</td><td><a onclick=\"removeDestinationURL (\\'' + destinationURL + '\\', \\'destinationUrl_' + parseInt(currentColumnId) + '\\');return false;\"' +\n");
      out.write("                    'href=\"#\" class=\"icon-link\" style=\"background-image: url(../admin/images/delete.gif)\"> Delete </a></td></tr>';\n");
      out.write("\n");
      out.write("            $('#destinationURLsTable tbody').append(row);\n");
      out.write("        } else {\n");
      out.write("            var isExist = false;\n");
      out.write("            $.each(destinationURLs.split(\",\"), function (index, value) {\n");
      out.write("                if (value === destinationURL) {\n");
      out.write("                    isExist = true;\n");
      out.write("                    CARBON.showWarningDialog(\"Destination URL already exist\");\n");
      out.write("                    return false;\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("            if (isExist) {\n");
      out.write("                return false;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            $(\"#destinationURLs\").val(destinationURLs + \",\" + destinationURL);\n");
      out.write("            var row =\n");
      out.write("                    '<tr id=\"destinationUrl_' + parseInt(currentColumnId) + '\">' +\n");
      out.write("                    '</td><td style=\"padding-left: 15px !important; color: rgb(119, 119, 119);font-style: italic;\">' + destinationURL +\n");
      out.write("                    '</td><td><a onclick=\"removeDestinationURL(\\'' + destinationURL + '\\', \\'destinationUrl_' + parseInt(currentColumnId) + '\\');return false;\"' +\n");
      out.write("                    'href=\"#\" class=\"icon-link\" style=\"background-image: url(../admin/images/delete.gif)\"> Delete </a></td></tr>';\n");
      out.write("\n");
      out.write("            $('#destinationURLsTable tr:last').after(row);\n");
      out.write("\n");
      out.write("        }\n");
      out.write("        $(\"#destinationURLTxt\").val(\"\");\n");
      out.write("        $(\"#currentColumnId\").val(parseInt(currentColumnId) + 1);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function removeDestinationURL(destinationURL, columnId) {\n");
      out.write("\n");
      out.write("        var destinationURLs = $(\"#destinationURLs\").val();\n");
      out.write("        var newDestinationURLs = \"\";\n");
      out.write("        var isDeletingSelected = false;\n");
      out.write("\n");
      out.write("        if (destinationURLs.split(',').length <= 1) {\n");
      out.write("            CARBON.showWarningDialog(\"You should have atleast one destination URL. Add another URL to remove the last URL\", null, null);\n");
      out.write("            return false;\n");
      out.write("        }\n");
      out.write("        if (destinationURLs != null && destinationURLs.trim().length > 0) {\n");
      out.write("            $.each(destinationURLs.split(\",\"), function (index, value) {\n");
      out.write("                if (value === destinationURL) {\n");
      out.write("                    return true;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                if (newDestinationURLs.length > 0) {\n");
      out.write("                    newDestinationURLs = newDestinationURLs + \",\" + value;\n");
      out.write("                } else {\n");
      out.write("                    newDestinationURLs = value;\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("        }\n");
      out.write("\n");
      out.write("\n");
      out.write("        $('#' + columnId).remove();\n");
      out.write("        $(\"#destinationURLs\").val(newDestinationURLs);\n");
      out.write("\n");
      out.write("        if (newDestinationURLs.length == 0) {\n");
      out.write("            $('#destinationURLTblRow').remove();\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("function exportDefaultAuthSeq() {\n");
      out.write("    function doExport() {\n");
      out.write("        location.href='export-default-authSeq-finish-ajaxprocessor.jsp'\n");
      out.write("    }\n");
      out.write("    CARBON.showConfirmationDialog('");
      out.print(resourceBundle.getString("default.seq.export.para"));
      out.write("',\n");
      out.write("        doExport, null);\n");
      out.write("}\n");
      out.write("\n");
      out.write("function removeDefaultAuthSeq() {\n");
      out.write("    function doDelete() {\n");
      out.write("        $.ajax({\n");
      out.write("            type: 'POST',\n");
      out.write("            url: 'remove-default-authSeq-finish-ajaxprocessor.jsp',\n");
      out.write("            headers: {\n");
      out.write("                Accept: \"text/html\"\n");
      out.write("            },\n");
      out.write("            async: false,\n");
      out.write("            success: function (responseText, status) {\n");
      out.write("                if (status == \"success\") {\n");
      out.write("                    location.assign(\"idp-mgt-edit-local.jsp?selectDefaultSeq=true\");\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    CARBON.showConfirmationDialog('");
      out.print(resourceBundle.getString("alert.confirm.delete.default.seq"));
      out.write("' + '?',\n");
      out.write("        doDelete, null);\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("<script>\n");
      out.write("        function downloadRIDPMetadata() {\n");
      out.write("                jQuery('#idp-mgt-get-RIDP-form').submit();\n");
      out.write("        }\n");
      out.write("</script>\n");
      out.write("<form id=\"idp-mgt-get-RIDP-form\" name=\"idp-mgt-get-RIDP-form\" method=\"post\"\n");
      out.write("      action=\"idp-mgt-get-ridp-metadata-finish-ajaxprocessor.jsp\"></form>\n");
      //  fmt:bundle
      org.apache.taglibs.standard.tag.rt.fmt.BundleTag _jspx_th_fmt_005fbundle_005f0 = (org.apache.taglibs.standard.tag.rt.fmt.BundleTag) _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename.get(org.apache.taglibs.standard.tag.rt.fmt.BundleTag.class);
      boolean _jspx_th_fmt_005fbundle_005f0_reused = false;
      try {
        _jspx_th_fmt_005fbundle_005f0.setPageContext(_jspx_page_context);
        _jspx_th_fmt_005fbundle_005f0.setParent(null);
        // /idpmgt/idp-mgt-edit-local.jsp(450,0) name = basename type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_fmt_005fbundle_005f0.setBasename("org.wso2.carbon.idp.mgt.ui.i18n.Resources");
        int _jspx_eval_fmt_005fbundle_005f0 = _jspx_th_fmt_005fbundle_005f0.doStartTag();
        if (_jspx_eval_fmt_005fbundle_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          if (_jspx_eval_fmt_005fbundle_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
            out = org.apache.jasper.runtime.JspRuntimeLibrary.startBufferedBody(_jspx_page_context, _jspx_th_fmt_005fbundle_005f0);
          }
          do {
            out.write("<div id=\"middle\">\n");
            out.write("        <h2>\n");
            out.write("            ");
            if (_jspx_meth_fmt_005fmessage_005f0(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("</h2>\n");
            out.write("        <div id=\"workArea\">\n");
            out.write("\n");
            out.write("                <div class=\"sectionSeperator \">");
            if (_jspx_meth_fmt_005fmessage_005f1(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("</div>\n");
            out.write("                <div class=\"sectionSub\">\n");
            out.write("                            <form id=\"idp-mgt-edit-local-form\" name=\"idp-mgt-edit-local-form\" method=\"post\"\n");
            out.write("                                  action=\"idp-mgt-edit-finish-local-ajaxprocessor.jsp\">\n");
            out.write("                    <table class=\"carbonFormTable\">\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f2(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                            <td>\n");
            out.write("                                <input id=\"homeRealmId\" name=\"homeRealmId\" type=\"text\" value=\"");
            out.print(Encode.forHtmlAttribute(homeRealmId));
            out.write("\" autofocus/>\n");
            out.write("                                <div class=\"sectionHelp\">\n");
            out.write("                                    ");
            if (_jspx_meth_fmt_005fmessage_005f3(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("</div>\n");
            out.write("                            </td>\n");
            out.write("                        </tr>\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f4(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("<font color=\"red\">*</font>:</td>\n");
            out.write("                            <td>\n");
            out.write("                                <input id=\"sessionIdleTimeout\" name=\"sessionIdleTimeout\" type=\"text\" white-list-patterns=\"^0*[1-9][0-9]*$\" value=\"");
            out.print(Encode.forHtmlAttribute(sessionIdleTimeout));
            out.write("\" autofocus/>\n");
            out.write("                                <div class=\"sectionHelp\">\n");
            out.write("                                    ");
            if (_jspx_meth_fmt_005fmessage_005f5(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("</div>\n");
            out.write("                            </td>\n");
            out.write("                        </tr>\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f6(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("<font color=\"red\">*</font>:</td>\n");
            out.write("                            <td>\n");
            out.write("                                <input id=\"rememberMeTimeout\" name=\"rememberMeTimeout\" type=\"text\" white-list-patterns=\"^0*[1-9][0-9]*$\" value=\"");
            out.print(Encode.forHtmlAttribute(rememberMeTimeout));
            out.write("\" autofocus/>\n");
            out.write("                                <div class=\"sectionHelp\">\n");
            out.write("                                    ");
            if (_jspx_meth_fmt_005fmessage_005f7(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("</div>\n");
            out.write("                            </td>\n");
            out.write("                        </tr>\n");
            out.write("                    </table>\n");
            out.write("\n");
            out.write("                    <h2 id=\"authenticationconfighead\"  class=\"sectionSeperator trigger active\" >\n");
            out.write("                \t\t<a href=\"#\">Inbound Authentication Configuration</a>\n");
            out.write("            \t\t</h2>\n");
            out.write("            \t\t<div class=\"toggle_container sectionSub\" style=\"margin-bottom:10px;display:none\" id=\"authenticationconfig\">\n");
            out.write("\n");
            out.write("                    <h2 id=\"openidconfighead\"  class=\"sectionSeperator trigger active\" style=\"background-color: beige;\">\n");
            out.write("                \t\t<a href=\"#\">");
            if (_jspx_meth_fmt_005fmessage_005f8(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("</a>\n");
            out.write("            \t\t</h2>\n");
            out.write("            \t\t<div class=\"toggle_container sectionSub\" style=\"margin-bottom:10px;display:none\" id=\"openidconfig\">\n");
            out.write("                    <table class=\"carbonFormTable\">\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f9(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                            <td>");
            out.print(Encode.forHtml(openidUrl));
            out.write("</td>\n");
            out.write("                        </tr>\n");
            out.write("                    </table>\n");
            out.write("                    </div>\n");
            out.write("\n");
            out.write("                    <h2 id=\"saml2confighead\"  class=\"sectionSeperator trigger active\" style=\"background-color: beige;\">\n");
            out.write("                \t\t<a href=\"#\">");
            if (_jspx_meth_fmt_005fmessage_005f10(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("</a>\n");
            out.write("            \t\t</h2>\n");
            out.write("            \t\t<div class=\"toggle_container sectionSub\" style=\"margin-bottom:10px;display:none\" id=\"saml2config\">\n");
            out.write("\n");
            out.write("                    <table class=\"carbonFormTable\">\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f11(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                            <td>\n");
            out.write("                                <input id=\"idPEntityId\" name=\"idPEntityId\" type=\"text\" value=\"");
            out.print(Encode.forHtmlAttribute(idPEntityId));
            out.write("\"/>\n");
            out.write("                                <div class=\"sectionHelp\">\n");
            out.write("                                    ");
            if (_jspx_meth_fmt_005fmessage_005f12(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("</div>\n");
            out.write("                            </td>\n");
            out.write("                        </tr>\n");
            out.write("                        <tr id=\"destinationURLInputRow\">\n");
            out.write("                            <td class=\"leftCol-med labelField\">\n");
            out.write("                                ");
            if (_jspx_meth_fmt_005fmessage_005f13(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("<font color=\"red\">*</font>\n");
            out.write("                            </td>\n");
            out.write("                            <td>\n");
            out.write("                                <input type=\"text\" id=\"destinationURLTxt\" value=\"\" white-list-patterns=\"http-url https-url\"/>\n");
            out.write("                                <input id=\"addDestinationURLBtn\" type=\"button\" value=\"");
            if (_jspx_meth_fmt_005fmessage_005f14(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("\"\n");
            out.write("                                       onclick=\"onClickAddDestinationUrl()\"/>\n");
            out.write("                            </td>\n");
            out.write("                        </tr>\n");
            out.write("                        <!--Start destination url table conditrion check from here.-->\n");
            out.write("                        <tr id=\"destinationURLTblRow\">\n");
            out.write("                            <td></td>\n");
            out.write("                            <td>\n");
            out.write("                                <table id=\"destinationURLsTable\" style=\"width: 40%; margin-bottom: 3px;\" class=\"styledInner\">\n");
            out.write("                                    <tbody id=\"destinationURLsTableBody\">\n");
            out.write("                                    ");

                                        StringBuilder destinationURLsBuilder = new StringBuilder();
                                        int destinationColumnId = 0;
                                        if (destinationURLList != null) {
                                            for (Property destinationURL : destinationURLList) {
                                                if (destinationURLsBuilder.length() > 0) {
                                                    destinationURLsBuilder.append(",").append(destinationURL.getValue());
                                                } else {
                                                    destinationURLsBuilder.append(destinationURL.getValue());
                                                }
                                                String id = StringUtils.replace(destinationURL.getName(), IdentityApplicationConstants.MULTIVALUED_PROPERTY_CHARACTER, "_");
                                    
            out.write("<tr id=\"");
            out.print(Encode.forHtmlAttribute(id));
            out.write("\">\n");
            out.write("                                        <td style=\"padding-left: 15px !important; color: rgb(119, 119, 119);font-style: italic;\">\n");
            out.write("                                            ");
            out.print(Encode.forHtml(destinationURL.getValue()));
            out.write("</td>\n");
            out.write("                                        <td>\n");
            out.write("                                            <a onclick=\"removeDestinationURL('");
            out.print(Encode.forJavaScriptAttribute(destinationURL.getValue()));
            out.write("',\n");
            out.write("                                                    '");
            out.print(Encode.forJavaScriptAttribute(id));
            out.write("');return false;\"\n");
            out.write("                                               href=\"#\" class=\"icon-link\"\n");
            out.write("                                               style=\"background-image: url(../admin/images/delete.gif)\">\n");
            out.write("                                                Delete\n");
            out.write("                                            </a>\n");
            out.write("                                        </td>\n");
            out.write("                                    </tr>\n");
            out.write("                                    ");

                                                destinationColumnId++;
                                            }
                                        }
                                    
            out.write("</tbody>\n");
            out.write("                                </table>\n");
            out.write("                                <input type=\"hidden\" id=\"destinationURLs\" name=\"destinationURLs\" value=\"");
            out.print(destinationURLsBuilder.length() > 0 ?
         Encode.forHtmlAttribute(destinationURLsBuilder.toString()) : "");
            out.write("\">\n");
            out.write("                                <input type=\"hidden\" id=\"currentColumnId\" value=\"");
            out.print(destinationColumnId);
            out.write("\">\n");
            out.write("                            </td>\n");
            out.write("                        </tr>\n");
            out.write("                        <!--End the if conditions from here. For the destination url table-->\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f15(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                            <td><input id=\"samlSSOUrl\" name=\"samlSSOUrl\"\n");
            out.write("                                       type=\"text\" value=\"");
            out.print(Encode.forHtmlContent(samlSSOUrl));
            out.write("\"\n");
            out.write("                                       white-list-patterns=\"http-url https-url\"/></td>\n");
            out.write("                        </tr>\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f16(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                            <td><input id=\"samlSLOUrl\" name=\"samlSLOUrl\"\n");
            out.write("                                       type=\"text\" value=\"");
            out.print(Encode.forHtmlContent(samlSLOUrl));
            out.write("\"\n");
            out.write("                                       white-list-patterns=\"http-url https-url\"/></td>\n");
            out.write("                        </tr>\n");
            out.write("                        <tr style=\"display:none;\">\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f17(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                            <td>");
            out.print(Encode.forHtmlContent(samlECPUrl));
            out.write("</td>\n");
            out.write("                        </tr>\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f18(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                            <td>");
            out.print(Encode.forHtmlContent(samlArtifactUrl));
            out.write("</td>\n");
            out.write("                        </tr>\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f19(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                            <td>\n");
            out.write("                                <input id=\"samlMetadataValidityPeriod\" name=\"samlMetadataValidityPeriod\" type=\"text\"\n");
            out.write("                                       value=\"");
            out.print(Encode.forHtmlAttribute(samlMetadataValidityPeriod));
            out.write("\" autofocus/>\n");
            out.write("                                <div class=\"sectionHelp\">\n");
            out.write("                                    ");
            if (_jspx_meth_fmt_005fmessage_005f20(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("</div>\n");
            out.write("                            </td>\n");
            out.write("                        </tr>\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">\n");
            out.write("                                <label for=\"samlMetadataSigningEnabled\">");
            if (_jspx_meth_fmt_005fmessage_005f21(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("</label>\n");
            out.write("                            </td>\n");
            out.write("                            <td>\n");
            out.write("                                <div class=\"sectionCheckbox\">\n");
            out.write("                                    <input id=\"samlMetadataSigningEnabled\" name=\"samlMetadataSigningEnabled\"\n");
            out.write("                                           type=\"checkbox\" ");
            out.print(samlMetadataSigningEnabledChecked);
            out.write("/>\n");
            out.write("                                </div>\n");
            out.write("                            </td>\n");
            out.write("                        </tr>\n");
            out.write("                    </table>\n");
            out.write("                        <br>\n");
            out.write("                        <button onclick=\"downloadRIDPMetadata()\" type=\"button\" id=\"downloadResidentIdpMetadataData\"\n");
            out.write("                                                                  name=\"downloadResidentIdpMetadataData\">");
            if (_jspx_meth_fmt_005fmessage_005f22(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("</button>\n");
            out.write("                    </div>\n");
            out.write("\n");
            out.write("                    <h2 id=\"oauth1confighead\"  class=\"sectionSeperator trigger active\" style=\"background-color: beige;\">\n");
            out.write("                        <a href=\"#\">");
            if (_jspx_meth_fmt_005fmessage_005f23(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("</a>\n");
            out.write("                    </h2>\n");
            out.write("                    <div class=\"toggle_container sectionSub\" style=\"margin-bottom:10px;display:none\" id=\"oauth1config\">\n");
            out.write("\n");
            out.write("                        <table class=\"carbonFormTable\">\n");
            out.write("                            <tr>\n");
            out.write("                                <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f24(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                                <td>");
            out.print(Encode.forHtmlContent(oauth1RequestTokenUrl));
            out.write("</td>\n");
            out.write("                            </tr>\n");
            out.write("                            <tr>\n");
            out.write("                                <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f25(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                                <td>");
            out.print(Encode.forHtmlContent(oauth1AuthorizeUrl));
            out.write("</td>\n");
            out.write("                            </tr>\n");
            out.write("                            <tr>\n");
            out.write("                                <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f26(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                                <td>");
            out.print(Encode.forHtmlContent(oauth1AccessTokenUrl));
            out.write("</td>\n");
            out.write("                            </tr>\n");
            out.write("                        </table>\n");
            out.write("                    </div>\n");
            out.write("\n");
            out.write("                    <h2 id=\"oidcconfighead\"  class=\"sectionSeperator trigger active\" style=\"background-color: beige;\">\n");
            out.write("                \t\t<a href=\"#\">");
            if (_jspx_meth_fmt_005fmessage_005f27(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("</a>\n");
            out.write("            \t\t</h2>\n");
            out.write("            \t\t<div class=\"toggle_container sectionSub\" style=\"margin-bottom:10px;display:none\" id=\"oidcconfig\">\n");
            out.write("\n");
            out.write("                    <table class=\"carbonFormTable\">\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f28(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                            <td>\n");
            out.write("                                <input id=\"oidcIdPEntityId\" name=\"oidcIdPEntityId\" type=\"text\"\n");
            out.write("                                       value=\"");
            out.print(Encode.forHtmlAttribute(oidcIdpEntityId));
            out.write("\"/>\n");
            out.write("\n");
            out.write("                                <div class=\"sectionHelp\">\n");
            out.write("                                    ");
            if (_jspx_meth_fmt_005fmessage_005f29(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("</div>\n");
            out.write("                            </td>\n");
            out.write("                        </tr>\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f30(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                            <td>");
            out.print(Encode.forHtmlContent(authzUrl));
            out.write("</td>\n");
            out.write("                        </tr>\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f31(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                            <td>");
            out.print(Encode.forHtmlContent(tokenUrl));
            out.write("</td>\n");
            out.write("                        </tr>\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f32(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                            <td>");
            out.print(Encode.forHtmlContent(revokeUrl));
            out.write("</td>\n");
            out.write("                        </tr>\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f33(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                            <td>");
            out.print(Encode.forHtmlContent(introspectUrl));
            out.write("</td>\n");
            out.write("                        </tr>\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f34(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                            <td>");
            out.print(Encode.forHtmlContent(userInfoUrl));
            out.write("</td>\n");
            out.write("                        </tr>\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f35(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                            <td>");
            out.print(Encode.forHtmlContent(oidcCheckSessionEndpoint));
            out.write("</td>\n");
            out.write("                        </tr>\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f36(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                            <td>");
            out.print(Encode.forHtmlContent(oidcLogoutEndpoint));
            out.write("</td>\n");
            out.write("                        </tr>\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f37(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                            <td>");
            out.print(Encode.forHtmlContent(oidcWebFingerEndpoint));
            out.write("</td>\n");
            out.write("                        </tr>\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f38(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                            <td>");
            out.print(Encode.forHtmlContent(oidcDiscoveryEndpoint));
            out.write("</td>\n");
            out.write("                        </tr>\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f39(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                            <td>");
            out.print(Encode.forHtmlContent(oauth2DcrEndpoint));
            out.write("</td>\n");
            out.write("                        </tr>\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f40(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                            <td>");
            out.print(Encode.forHtmlContent(oauth2JwksEndpoint));
            out.write("</td>\n");
            out.write("                        </tr>\n");
            out.write("                    </table>\n");
            out.write("                    </div>\n");
            out.write("\n");
            out.write("                    <h2 id=\"passivestsconfighead\"  class=\"sectionSeperator trigger active\" style=\"background-color: beige;\">\n");
            out.write("                \t\t<a href=\"#\">");
            if (_jspx_meth_fmt_005fmessage_005f41(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("</a>\n");
            out.write("            \t\t</h2>\n");
            out.write("            \t\t<div class=\"toggle_container sectionSub\" style=\"margin-bottom:10px;display:none\" id=\"passivestsconfig\">\n");
            out.write("                    <table class=\"carbonFormTable\">\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f42(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                            <td>\n");
            out.write("                                <input id=\"passiveSTSIdPEntityId\" name=\"passiveSTSIdPEntityId\" type=\"text\" value=\"");
            out.print(Encode.forHtmlAttribute(passivestsIdPEntityId));
            out.write("\"/>\n");
            out.write("                                <div class=\"sectionHelp\">\n");
            out.write("                                    ");
            if (_jspx_meth_fmt_005fmessage_005f43(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("</div>\n");
            out.write("                            </td>\n");
            out.write("                        </tr>\n");
            out.write("                        <tr>\n");
            out.write("                        <td class=\"leftCol-med labelField\">\n");
            out.write("                            <label for=\"samlAuthnRequestsSigningEnabled\">");
            if (_jspx_meth_fmt_005fmessage_005f44(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("</label>\n");
            out.write("                        </td>\n");
            out.write("                         <td>\n");
            out.write("                             <div class=\"sectionCheckbox\">\n");
            out.write("                                  <input id=\"samlAuthnRequestsSigningEnabled\" name=\"samlAuthnRequestsSigningEnabled\"\n");
            out.write("                                         type=\"checkbox\" ");
            out.print(samlAuthnRequestsSigningChecked);
            out.write("/>\n");
            out.write("                             </div>\n");
            out.write("                         </td>\n");
            out.write("                    </tr>\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f45(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                            <td>");
            out.print(Encode.forHtmlContent(passiveSTSUrl));
            out.write("</td>\n");
            out.write("                        </tr>\n");
            out.write("                    </table>\n");
            out.write("                    </div>\n");
            out.write("\n");
            out.write("                        <h2 id=\"stsconfighead\"  class=\"sectionSeperator trigger active\" style=\"background-color: beige;\">\n");
            out.write("                            <a href=\"#\">");
            if (_jspx_meth_fmt_005fmessage_005f46(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("</a>\n");
            out.write("                        </h2>\n");
            out.write("                        <div class=\"toggle_container sectionSub\" style=\"margin-bottom:10px;display:none\" id=\"stsconfig\">\n");
            out.write("                            <table class=\"carbonFormTable\">\n");
            out.write("                                <tr>\n");
            out.write("                                    <td class=\"leftCol-med labelField\" style=\"padding-top: 5px\">");
            if (_jspx_meth_fmt_005fmessage_005f47(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                                    <td>\n");
            out.write("                                        <a href=\"javascript:document.location.href='");
            out.print(
                                        Encode.forUriComponent(stsUrl)+"?wsdl");
            out.write("'\"\n");
            out.write("                                           class=\"icon-link\"\n");
            out.write("                                           style=\"background-image:url(images/sts.gif);margin-left: 0\">");
            out.print(Encode.forHtmlContent(stsUrl));
            out.write("</a>\n");
            out.write("                                    </td>\n");
            out.write("                                    <td>\n");
            out.write("                                        <a href=\"javascript:document.location.href='../securityconfig/index.jsp?serviceName=wso2carbon-sts'\"\n");
            out.write("                                           class=\"icon-link\"\n");
            out.write("                                           style=\"background-image:url(images/configure.gif);margin-right: 300px\">\n");
            out.write("                                            ");
            if (_jspx_meth_fmt_005fmessage_005f48(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("</a>\n");
            out.write("                                    </td>\n");
            out.write("                                </tr>\n");
            out.write("                            </table>\n");
            out.write("                        </div>\n");
            out.write("                </div>\n");
            out.write("                    <h2 id=\"inboundprovisioningconfighead\"  class=\"sectionSeperator trigger active\">\n");
            out.write("                \t\t<a href=\"#\">Inbound Provisioning Configuration</a>\n");
            out.write("            \t\t</h2>\n");
            out.write("            \t\t<div class=\"toggle_container sectionSub\" style=\"margin-bottom:10px;display:none\" id=\"inboundprovisioningconfig\">\n");
            out.write("            \t\t  <table class=\"carbonFormTable\">\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f49(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                            <td>");
            out.print(Encode.forHtmlContent(scimUserEp));
            out.write("</td>\n");
            out.write("                        </tr>\n");
            out.write("                        <tr>\n");
            out.write("                            <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f50(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                            <td>");
            out.print(Encode.forHtmlContent(scimGroupEp));
            out.write("</td>\n");
            out.write("                        </tr>\n");
            out.write("                          <tr>\n");
            out.write("                              <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f51(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                              <td>");
            out.print(Encode.forHtmlContent(scim2UserEp));
            out.write("</td>\n");
            out.write("                          </tr>\n");
            out.write("                          <tr>\n");
            out.write("                              <td class=\"leftCol-med labelField\">");
            if (_jspx_meth_fmt_005fmessage_005f52(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(":</td>\n");
            out.write("                              <td>");
            out.print(Encode.forHtmlContent(scim2GroupEp));
            out.write("</td>\n");
            out.write("                          </tr>\n");
            out.write("                    </table>\n");
            out.write("\n");
            out.write("            \t\t</div>\n");
            out.write("\n");

        for (String catName : catMap.keySet()) {
            if (DEFAULT.equals(catName)) {
                for (ConnectorConfig connectorConfig : catMap.get(DEFAULT).get(DEFAULT)) {

            out.write("<h2 id=\"governance_config_category_header\" class=\"sectionSeperator trigger active\">\n");
            out.write("                <a href=\"#\">");
            out.print(Encode.forHtmlContent(connectorConfig.getFriendlyName()));
            out.write("</a>\n");
            out.write("            </h2>\n");
            out.write("            <div class=\"toggle_container sectionSub\" style=\"margin-bottom:10px; display: none;\" id=\"roleConfig2\">\n");
            out.write("                <table class=\"carbonFormTable\">\n");
            out.write("                    ");

                    org.wso2.carbon.identity.governance.stub.bean.Property[] connectorProperties = connectorConfig.getProperties();
                        for (int k = 0; k < connectorProperties.length; k++) {
                            if (connectorProperties[k] != null) {
                                String value = connectorProperties[k].getValue();
                                String displayName = connectorProperties[k].getDisplayName();
                                String name = connectorProperties[k].getName();
                                if (StringUtils.isNotEmpty(name) && name.startsWith("_url_")) {
            out.write("<tr>\n");
            out.write("                        <td style=\"width: 500px;\">\n");
            out.write("                            ");
            out.print(Encode.forHtmlContent(displayName));
            out.write("</td>\n");
            out.write("                        <td>\n");
            out.write("                            <a class=\"icon-link\"\n");
            out.write("                               style=\"background-image:url(images/configure.gif); margin-left: 0px; display: block; float:none\"\n");
            out.write("                               href=\"");
            out.print(Encode.forHtmlAttribute(value));
            out.write("\"> Click here </a>\n");
            out.write("\n");
            out.write("                            ");
 if (StringUtils.isNotBlank(connectorProperties[k].getDescription())) {
            out.write("<div class=\"sectionHelp\">\n");
            out.write("                                ");
            out.print(Encode.forHtmlContent(connectorProperties[k].getDescription()));
            out.write("</div>\n");
            out.write("                            ");
}
            out.write("</td>\n");
            out.write("                    </tr>\n");
            out.write("\n");
            out.write("\n");
            out.write("                    ");
 } else { 
            out.write("<tr>\n");
            out.write("                        <td style=\"width: 500px;\">\n");
            out.write("                            ");
            out.print(Encode.forHtmlContent(connectorProperties[k].getDisplayName()));
            out.write("</td>\n");
            out.write("                        ");

                            if (value.equalsIgnoreCase("true") || value.equalsIgnoreCase("false")) {
                                // assume as boolean value. But actually this must be sent from backend.
                                // will fix for next release.
                        
            out.write("<td>\n");
            out.write("                            <input class=\"sectionCheckbox\" type=\"checkbox\"\n");
            out.write("                                   onclick=\"setBooleanValueToTextBox(this)\"\n");
            out.write("                                    ");
if (Boolean.parseBoolean(value)) {
            out.write(" checked=\"checked\" ");
}
            out.write("\n");
            out.write("                                   value=\"");
            out.print(Encode.forHtmlAttribute(connectorProperties[k].getName()));
            out.write("\"/>\n");
            out.write("                            ");

                                if (StringUtils.isNotBlank(connectorProperties[k].getDescription())) {
            out.write("<div class=\"sectionHelp\">\n");
            out.write("                                ");
            out.print(Encode.forHtmlContent(connectorProperties[k].getDescription()));
            out.write("</div>\n");
            out.write("                            ");
}
            out.write("<input id=\"");
            out.print(Encode.forHtmlAttribute(connectorProperties[k].getName()));
            out.write("\"\n");
            out.write("                                   name=\"property__");
            out.print(Encode.forHtmlAttribute(connectorProperties[k].getName()));
            out.write("\"\n");
            out.write("                                   type=\"hidden\" value=\"");
            out.print(Encode.forHtmlAttribute(value));
            out.write("\"/>\n");
            out.write("                        </td>\n");
            out.write("                        ");

                        } else {
            out.write("<td colspan=\"2\"><input\n");
            out.write("                                ");
if (connectorProperties[k].getName().startsWith("__secret__")) {
            out.write("\n");
            out.write("                                type=\"password\" autocomplete=\"off\"\n");
            out.write("                                ");
 } else {
            out.write("\n");
            out.write("                                type=\"text\" ");

                            } 
            out.write(" name=property__");
            out.print(Encode.forHtmlAttribute(connectorProperties[k].getName()));
            out.write("\n");
            out.write("                                id=");
            out.print(Encode.forHtmlAttribute(connectorProperties[k].getName()));
            out.write("\n");
            out.write("                                        style=\"width:400px\"\n");
            out.write("                                value=\"");
            out.print(Encode.forHtmlAttribute(value));
            out.write("\"/>\n");
            out.write("                            ");

                                if (StringUtils.isNotBlank(connectorProperties[k].getDescription())) {
            out.write("<div class=\"sectionHelp\">\n");
            out.write("                                ");
            out.print(Encode.forHtmlContent(connectorProperties[k].getDescription()));
            out.write("</div>\n");
            out.write("                            ");
}
            out.write("</td>\n");
            out.write("                        ");
}
            out.write("</tr>\n");
            out.write("                    ");

                                }
                            }
                        }
            out.write("</table></div>\n");

                }
            } else {

            out.write("<h2 id=\"governance_config_header_subcategory\" class=\"sectionSeperator trigger active\">\n");
            out.write("            <a href=\"#\">");
            out.print(Encode.forHtmlContent(catName));
            out.write("</a>\n");
            out.write("        </h2>\n");
            out.write("\n");

        if (StringUtils.isNotEmpty(category) && category.equalsIgnoreCase(catName)) {

            out.write("<div class=\"toggle_container sectionSub\" style=\"margin-bottom:10px; display: block;\" id=\"roleConfig2\">\n");
            out.write("\n");
      }  else {

            out.write("<div class=\"toggle_container sectionSub\" style=\"margin-bottom:10px; display:none;\" id=\"roleConfig2\">\n");
      }


                Map<String, List<ConnectorConfig>> subCatMap = catMap.get(catName);
                for (String subCatName : subCatMap.keySet()) {
                    if (DEFAULT.equals(subCatName)){
                        for (ConnectorConfig connectorConfig : subCatMap.get(DEFAULT) ){

            out.write("<h2 id=\"governance_config_header\" class=\"active trigger\" style=\"background-color: beige;\">\n");
            out.write("                <a href=\"#\">");
            out.print(Encode.forHtmlContent(connectorConfig.getFriendlyName()));
            out.write("</a>\n");
            out.write("            </h2>\n");
            out.write("\n");

        if (StringUtils.isNotEmpty(subCategory) && subCategory.equalsIgnoreCase(connectorConfig.getFriendlyName())) {

            out.write("<div class=\"toggle_container sectionSub\" style=\"margin-bottom:10px; display: block;\" id=\"roleConfig2\">\n");

        }  else {

            out.write("<div class=\"toggle_container sectionSub\" style=\"margin-bottom:10px; display: none;\" id=\"roleConfig2\">\n");

        }

            out.write("<table class=\"carbonFormTable\">\n");
            out.write("                    ");

                        org.wso2.carbon.identity.governance.stub.bean.Property[] connectorProperties = connectorConfig.getProperties();
                        for (int k = 0; k < connectorProperties.length; k++) {
                            if (connectorProperties[k] != null) {
                                String value = connectorProperties[k].getValue();
                                String displayName = connectorProperties[k].getDisplayName();
                                String name = connectorProperties[k].getName();
                                if (StringUtils.isNotEmpty(name) && name.startsWith("_url_")) { 
            out.write("<tr>\n");
            out.write("                        <td style=\"width: 500px;\">\n");
            out.write("                            ");
            out.print(Encode.forHtmlContent(displayName));
            out.write("</td>\n");
            out.write("                        <td>\n");
            out.write("                            <a class=\"icon-link\"\n");
            out.write("                               style=\"background-image:url(images/configure.gif); margin-left: 0px; display: block; float:none\"\n");
            out.write("                               href=\"");
            out.print(Encode.forHtmlAttribute(value));
            out.write("\"> Click here </a>\n");
            out.write("\n");
            out.write("                            ");
 if (StringUtils.isNotBlank(connectorProperties[k].getDescription())) {
            out.write("<div class=\"sectionHelp\">\n");
            out.write("                                ");
            out.print(Encode.forHtmlContent(connectorProperties[k].getDescription()));
            out.write("</div>\n");
            out.write("                            ");
}
            out.write("</td>\n");
            out.write("                    </tr>\n");
            out.write("\n");
            out.write("\n");
            out.write("                    ");
 } else { 
            out.write("<tr>\n");
            out.write("                        <td style=\"width: 500px;\">\n");
            out.write("                            ");
            out.print(Encode.forHtmlContent(connectorProperties[k].getDisplayName()));
            out.write("</td>\n");
            out.write("                        ");

                            if (value.equalsIgnoreCase("true") || value.equalsIgnoreCase("false")) {
                                // assume as boolean value. But actually this must be sent from backend.
                                // will fix for next release.
                        
            out.write("<td>\n");
            out.write("                            <input class=\"sectionCheckbox\" type=\"checkbox\"\n");
            out.write("                                   onclick=\"setBooleanValueToTextBox(this)\"\n");
            out.write("                                    ");
if (Boolean.parseBoolean(value)) {
            out.write(" checked=\"checked\" ");
}
            out.write("\n");
            out.write("                                   value=\"");
            out.print(Encode.forHtmlAttribute(connectorProperties[k].getName()));
            out.write("\"/>\n");
            out.write("                            ");

                                if (StringUtils.isNotBlank(connectorProperties[k].getDescription())) {
            out.write("<div class=\"sectionHelp\">\n");
            out.write("                                ");
            out.print(Encode.forHtmlContent(connectorProperties[k].getDescription()));
            out.write("</div>\n");
            out.write("                            ");
}
            out.write("<input id=\"");
            out.print(Encode.forHtmlAttribute(connectorProperties[k].getName()));
            out.write("\"\n");
            out.write("                                   name=\"property__");
            out.print(Encode.forHtmlAttribute(connectorProperties[k].getName()));
            out.write("\"\n");
            out.write("                                   type=\"hidden\" value=\"");
            out.print(Encode.forHtmlAttribute(value));
            out.write("\"/>\n");
            out.write("                        </td>\n");
            out.write("                        ");

                        } else {
            out.write("<td colspan=\"2\"><input ");
if (connectorProperties[k].getName().startsWith("__secret__")) {
            out.write("\n");
            out.write("                                type=\"password\" autocomplete=\"off\"\n");
            out.write("                                ");
 } else {
            out.write("\n");
            out.write("                                type=\"text\" ");

                            } 
            out.write("\n");
            out.write("                                name=property__");
            out.print(Encode.forHtmlAttribute(connectorProperties[k].getName()));
            out.write("\n");
            out.write("                                id=");
            out.print(Encode.forHtmlAttribute(connectorProperties[k].getName()));
            out.write("\n");
            out.write("                                        style=\"width:400px\"\n");
            out.write("                                value=\"");
            out.print(Encode.forHtmlAttribute(value));
            out.write("\"/>\n");
            out.write("                            ");

                                if (StringUtils.isNotBlank(connectorProperties[k].getDescription())) {
            out.write("<div class=\"sectionHelp\">\n");
            out.write("                                ");
            out.print(Encode.forHtmlContent(connectorProperties[k].getDescription()));
            out.write("</div>\n");
            out.write("                            ");
}
            out.write("</td>\n");
            out.write("                        ");
}
            out.write("</tr>\n");
            out.write("                    ");

                                }
                            }
                        }
            out.write("</table></div>\n");

                        }
                    } else {

            out.write("<h2 id=\"governance_config_header_subcategory2\" class=\"active trigger\" style=\"background-color: beige;\">\n");
            out.write("            <a href=\"#\">");
            out.print(Encode.forHtmlContent(subCatName));
            out.write("</a>\n");
            out.write("        </h2>\n");
            out.write("          <div class=\"toggle_container sectionSub\" style=\"margin-bottom:10px; display: none;\" id=\"roleConfig2\">\n");

                        for (ConnectorConfig connectorConfig : subCatMap.get(subCatName) ){

            out.write("<h2 id=\"governance_config_header2\" class=\"sectionSeperator trigger active\">\n");
            out.write("                <a href=\"#\">");
            out.print(Encode.forHtmlContent(connectorConfig.getFriendlyName()));
            out.write("</a>\n");
            out.write("            </h2>\n");
            out.write("            <div class=\"toggle_container sectionSub\" style=\"margin-bottom:10px; display: none;\" id=\"roleConfig2\">\n");
            out.write("                <table class=\"carbonFormTable\">\n");
            out.write("                    ");

                    org.wso2.carbon.identity.governance.stub.bean.Property[] connectorProperties = connectorConfig.getProperties();
                        for (int k = 0; k < connectorProperties.length; k++) {
                            if (connectorProperties[k] != null) {
                                String value = connectorProperties[k].getValue();
            out.write("<tr>\n");
            out.write("                        <td style=\"width: 500px;\">\n");
            out.write("                            ");
            out.print(Encode.forHtmlContent(connectorProperties[k].getDisplayName()));
            out.write("</td>\n");
            out.write("                        ");

                            if (value.equalsIgnoreCase("true") || value.equalsIgnoreCase("false")) {
                                // assume as boolean value. But actually this must be sent from backend.
                                // will fix for next release.
                        
            out.write("<td>\n");
            out.write("                            <input class=\"sectionCheckbox\" type=\"checkbox\"\n");
            out.write("                                   onclick=\"setBooleanValueToTextBox(this)\"\n");
            out.write("                                    ");
if (Boolean.parseBoolean(value)) {
            out.write(" checked=\"checked\" ");
}
            out.write("\n");
            out.write("                                   value=\"");
            out.print(Encode.forHtmlAttribute(connectorProperties[k].getName()));
            out.write("\"/>\n");
            out.write("                            ");

                                if (StringUtils.isNotBlank(connectorProperties[k].getDescription())) {
            out.write("<div class=\"sectionHelp\">\n");
            out.write("                                ");
            out.print(Encode.forHtmlContent(connectorProperties[k].getDescription()));
            out.write("</div>\n");
            out.write("                            ");
}
            out.write("<input id=\"");
            out.print(Encode.forHtmlAttribute(connectorProperties[k].getName()));
            out.write("\"\n");
            out.write("                                   name=\"property__");
            out.print(Encode.forHtmlAttribute(connectorProperties[k].getName()));
            out.write("\"\n");
            out.write("                                   type=\"hidden\" value=\"");
            out.print(Encode.forHtmlAttribute(value));
            out.write("\"/>\n");
            out.write("                        </td>\n");
            out.write("                        ");

                        } else {
            out.write("<td colspan=\"2\"><input ");
if (connectorProperties[k].getName().startsWith("__secret__")) {
            out.write("\n");
            out.write("                                type=\"password\" autocomplete=\"off\"\n");
            out.write("                                ");
 } else {
            out.write("\n");
            out.write("                                type=\"text\" ");

                            } 
            out.write(" name=property__");
            out.print(Encode.forHtmlAttribute(connectorProperties[k].getName()));
            out.write("\n");
            out.write("                                id=");
            out.print(Encode.forHtmlAttribute(connectorProperties[k].getName()));
            out.write("\n");
            out.write("                                        style=\"width:400px\"\n");
            out.write("                                value=\"");
            out.print(Encode.forHtmlAttribute(value));
            out.write("\"/>\n");
            out.write("                            ");

                                if (StringUtils.isNotBlank(connectorProperties[k].getDescription())) {
            out.write("<div class=\"sectionHelp\">\n");
            out.write("                                ");
            out.print(Encode.forHtmlContent(connectorProperties[k].getDescription()));
            out.write("</div>\n");
            out.write("                            ");
}
            out.write("</td>\n");
            out.write("                        ");
}
            out.write("</tr>\n");
            out.write("                    ");

                            }
                        }
            out.write("</table></div>\n");

                        }

            out.write("</div>\n");

                    }
                }

            out.write("</div>\n");

            }
    }

            out.write("</form>\n");
            out.write("                </div>\n");
            out.write("        </div>\n");
            out.write("                <div class=\"buttonRow\">\n");
            out.write("                    <input type=\"button\" value=\"");
            if (_jspx_meth_fmt_005fmessage_005f53(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("\" onclick=\"idpMgtUpdate();\"/>\n");
            out.write("                </div>\n");
            out.write("            </div>\n");
            out.write("    </div>\n");
            int evalDoAfterBody = _jspx_th_fmt_005fbundle_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
          if (_jspx_eval_fmt_005fbundle_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
            out = _jspx_page_context.popBody();
          }
        }
        if (_jspx_th_fmt_005fbundle_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
        _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename.reuse(_jspx_th_fmt_005fbundle_005f0);
        _jspx_th_fmt_005fbundle_005f0_reused = true;
      } finally {
        org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fbundle_005f0, _jsp_getInstanceManager(), _jspx_th_fmt_005fbundle_005f0_reused);
      }
 } 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_fmt_005fmessage_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f0 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f0_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f0.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(453,12) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f0.setKey("resident.idp");
      int _jspx_eval_fmt_005fmessage_005f0 = _jspx_th_fmt_005fmessage_005f0.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f0);
      _jspx_th_fmt_005fmessage_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f0, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f1 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f1_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f1.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(457,47) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f1.setKey("resident.realm.config");
      int _jspx_eval_fmt_005fmessage_005f1 = _jspx_th_fmt_005fmessage_005f1.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f1);
      _jspx_th_fmt_005fmessage_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f1, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f2(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f2 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f2_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f2.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(463,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f2.setKey("home.realm.id");
      int _jspx_eval_fmt_005fmessage_005f2 = _jspx_th_fmt_005fmessage_005f2.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f2);
      _jspx_th_fmt_005fmessage_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f2, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f2_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f3(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f3 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f3_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f3.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f3.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(467,36) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f3.setKey("home.realm.id.resident.help");
      int _jspx_eval_fmt_005fmessage_005f3 = _jspx_th_fmt_005fmessage_005f3.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f3);
      _jspx_th_fmt_005fmessage_005f3_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f3, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f3_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f4(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f4 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f4_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f4.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f4.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(472,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f4.setKey("idle.session.timeout");
      int _jspx_eval_fmt_005fmessage_005f4 = _jspx_th_fmt_005fmessage_005f4.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f4.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f4);
      _jspx_th_fmt_005fmessage_005f4_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f4, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f4_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f5(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f5 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f5_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f5.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f5.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(476,36) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f5.setKey("idle.session.timeout.help");
      int _jspx_eval_fmt_005fmessage_005f5 = _jspx_th_fmt_005fmessage_005f5.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f5.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f5);
      _jspx_th_fmt_005fmessage_005f5_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f5, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f5_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f6(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f6 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f6_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f6.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f6.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(481,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f6.setKey("remember.me.timeout");
      int _jspx_eval_fmt_005fmessage_005f6 = _jspx_th_fmt_005fmessage_005f6.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f6.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f6);
      _jspx_th_fmt_005fmessage_005f6_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f6, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f6_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f7(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f7 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f7_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f7.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f7.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(485,36) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f7.setKey("remember.me.timeout.help");
      int _jspx_eval_fmt_005fmessage_005f7 = _jspx_th_fmt_005fmessage_005f7.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f7.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f7);
      _jspx_th_fmt_005fmessage_005f7_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f7, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f7_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f8(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f8 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f8_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f8.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f8.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(497,30) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f8.setKey("openid.config");
      int _jspx_eval_fmt_005fmessage_005f8 = _jspx_th_fmt_005fmessage_005f8.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f8.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f8);
      _jspx_th_fmt_005fmessage_005f8_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f8, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f8_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f9(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f9 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f9_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f9.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f9.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(502,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f9.setKey("openid.url");
      int _jspx_eval_fmt_005fmessage_005f9 = _jspx_th_fmt_005fmessage_005f9.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f9.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f9);
      _jspx_th_fmt_005fmessage_005f9_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f9, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f9_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f10(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f10 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f10_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f10.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f10.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(509,30) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f10.setKey("saml2.web.sso.config");
      int _jspx_eval_fmt_005fmessage_005f10 = _jspx_th_fmt_005fmessage_005f10.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f10.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f10);
      _jspx_th_fmt_005fmessage_005f10_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f10, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f10_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f11(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f11 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f11_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f11.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f11.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(515,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f11.setKey("idp.entity.id");
      int _jspx_eval_fmt_005fmessage_005f11 = _jspx_th_fmt_005fmessage_005f11.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f11.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f11);
      _jspx_th_fmt_005fmessage_005f11_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f11, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f11_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f12(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f12 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f12_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f12.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f12.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(519,36) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f12.setKey("idp.entity.id.help");
      int _jspx_eval_fmt_005fmessage_005f12 = _jspx_th_fmt_005fmessage_005f12.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f12.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f12);
      _jspx_th_fmt_005fmessage_005f12_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f12, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f12_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f13(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f13 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f13_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f13.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f13.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(525,32) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f13.setKey("idp.entity.destinations");
      int _jspx_eval_fmt_005fmessage_005f13 = _jspx_th_fmt_005fmessage_005f13.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f13.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f13);
      _jspx_th_fmt_005fmessage_005f13_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f13, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f13_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f14(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f14 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f14_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f14.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f14.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(530,86) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f14.setKey("idp.destination.add");
      int _jspx_eval_fmt_005fmessage_005f14 = _jspx_th_fmt_005fmessage_005f14.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f14.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f14);
      _jspx_th_fmt_005fmessage_005f14_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f14, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f14_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f15(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f15 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f15_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f15.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f15.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(579,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f15.setKey("sso.url");
      int _jspx_eval_fmt_005fmessage_005f15 = _jspx_th_fmt_005fmessage_005f15.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f15.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f15);
      _jspx_th_fmt_005fmessage_005f15_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f15, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f15_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f16(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f16 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f16_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f16.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f16.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(585,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f16.setKey("logout.url");
      int _jspx_eval_fmt_005fmessage_005f16 = _jspx_th_fmt_005fmessage_005f16.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f16.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f16);
      _jspx_th_fmt_005fmessage_005f16_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f16, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f16_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f17(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f17 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f17_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f17.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f17.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(591,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f17.setKey("ecp.url");
      int _jspx_eval_fmt_005fmessage_005f17 = _jspx_th_fmt_005fmessage_005f17.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f17.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f17);
      _jspx_th_fmt_005fmessage_005f17_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f17, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f17_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f18(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f18 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f18_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f18.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f18.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(595,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f18.setKey("artifact.url");
      int _jspx_eval_fmt_005fmessage_005f18 = _jspx_th_fmt_005fmessage_005f18.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f18.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f18);
      _jspx_th_fmt_005fmessage_005f18_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f18, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f18_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f19(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f19 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f19_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f19.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f19.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(599,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f19.setKey("saml.metadata.validity.period");
      int _jspx_eval_fmt_005fmessage_005f19 = _jspx_th_fmt_005fmessage_005f19.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f19.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f19);
      _jspx_th_fmt_005fmessage_005f19_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f19, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f19_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f20(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f20 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f20_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f20.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f20.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(604,36) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f20.setKey("saml.metadata.validity.period.help");
      int _jspx_eval_fmt_005fmessage_005f20 = _jspx_th_fmt_005fmessage_005f20.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f20.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f20);
      _jspx_th_fmt_005fmessage_005f20_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f20, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f20_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f21(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f21 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f21_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f21.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f21.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(610,72) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f21.setKey("saml.metadata.signing.enabled");
      int _jspx_eval_fmt_005fmessage_005f21 = _jspx_th_fmt_005fmessage_005f21.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f21.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f21);
      _jspx_th_fmt_005fmessage_005f21_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f21, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f21_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f22(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f22 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f22_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f22.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f22.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(623,105) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f22.setKey("download.metadata.saml");
      int _jspx_eval_fmt_005fmessage_005f22 = _jspx_th_fmt_005fmessage_005f22.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f22.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f22);
      _jspx_th_fmt_005fmessage_005f22_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f22, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f22_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f23(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f23 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f23_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f23.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f23.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(629,36) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f23.setKey("oauth1.config");
      int _jspx_eval_fmt_005fmessage_005f23 = _jspx_th_fmt_005fmessage_005f23.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f23.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f23);
      _jspx_th_fmt_005fmessage_005f23_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f23, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f23_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f24(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f24 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f24_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f24.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f24.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(635,67) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f24.setKey("oauth1.request.endpoint");
      int _jspx_eval_fmt_005fmessage_005f24 = _jspx_th_fmt_005fmessage_005f24.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f24.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f24);
      _jspx_th_fmt_005fmessage_005f24_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f24, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f24_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f25(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f25 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f25_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f25.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f25.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(639,67) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f25.setKey("oauth1.authz.endpoint");
      int _jspx_eval_fmt_005fmessage_005f25 = _jspx_th_fmt_005fmessage_005f25.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f25.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f25);
      _jspx_th_fmt_005fmessage_005f25_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f25, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f25_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f26(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f26 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f26_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f26.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f26.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(643,67) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f26.setKey("oauth1.access.endpoint");
      int _jspx_eval_fmt_005fmessage_005f26 = _jspx_th_fmt_005fmessage_005f26.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f26.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f26);
      _jspx_th_fmt_005fmessage_005f26_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f26, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f26_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f27(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f27 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f27_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f27.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f27.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(650,30) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f27.setKey("oidc.config");
      int _jspx_eval_fmt_005fmessage_005f27 = _jspx_th_fmt_005fmessage_005f27.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f27.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f27);
      _jspx_th_fmt_005fmessage_005f27_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f27, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f27_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f28(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f28 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f28_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f28.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f28.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(656,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f28.setKey("idp.entity.id");
      int _jspx_eval_fmt_005fmessage_005f28 = _jspx_th_fmt_005fmessage_005f28.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f28.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f28);
      _jspx_th_fmt_005fmessage_005f28_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f28, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f28_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f29(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f29 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f29_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f29.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f29.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(662,36) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f29.setKey("idp.entity.id.help");
      int _jspx_eval_fmt_005fmessage_005f29 = _jspx_th_fmt_005fmessage_005f29.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f29.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f29);
      _jspx_th_fmt_005fmessage_005f29_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f29, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f29_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f30(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f30 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f30_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f30.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f30.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(667,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f30.setKey("authz.endpoint");
      int _jspx_eval_fmt_005fmessage_005f30 = _jspx_th_fmt_005fmessage_005f30.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f30.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f30);
      _jspx_th_fmt_005fmessage_005f30_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f30, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f30_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f31(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f31 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f31_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f31.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f31.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(671,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f31.setKey("token.endpoint");
      int _jspx_eval_fmt_005fmessage_005f31 = _jspx_th_fmt_005fmessage_005f31.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f31.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f31);
      _jspx_th_fmt_005fmessage_005f31_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f31, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f31_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f32(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f32 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f32_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f32.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f32.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(675,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f32.setKey("revoke.endpoint");
      int _jspx_eval_fmt_005fmessage_005f32 = _jspx_th_fmt_005fmessage_005f32.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f32.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f32);
      _jspx_th_fmt_005fmessage_005f32_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f32, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f32_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f33(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f33 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f33_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f33.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f33.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(679,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f33.setKey("introspect.endpoint");
      int _jspx_eval_fmt_005fmessage_005f33 = _jspx_th_fmt_005fmessage_005f33.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f33.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f33);
      _jspx_th_fmt_005fmessage_005f33_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f33, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f33_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f34(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f34 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f34_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f34.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f34.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(683,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f34.setKey("user.endpoint");
      int _jspx_eval_fmt_005fmessage_005f34 = _jspx_th_fmt_005fmessage_005f34.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f34.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f34);
      _jspx_th_fmt_005fmessage_005f34_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f34, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f34_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f35(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f35 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f35_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f35.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f35.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(687,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f35.setKey("checksession.endpoint");
      int _jspx_eval_fmt_005fmessage_005f35 = _jspx_th_fmt_005fmessage_005f35.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f35.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f35);
      _jspx_th_fmt_005fmessage_005f35_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f35, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f35_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f36(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f36 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f36_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f36.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f36.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(691,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f36.setKey("logout.endpoint");
      int _jspx_eval_fmt_005fmessage_005f36 = _jspx_th_fmt_005fmessage_005f36.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f36.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f36);
      _jspx_th_fmt_005fmessage_005f36_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f36, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f36_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f37(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f37 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f37_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f37.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f37.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(695,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f37.setKey("webfinger.endpoint");
      int _jspx_eval_fmt_005fmessage_005f37 = _jspx_th_fmt_005fmessage_005f37.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f37.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f37);
      _jspx_th_fmt_005fmessage_005f37_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f37, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f37_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f38(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f38 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f38_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f38.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f38.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(699,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f38.setKey("discovery.endpoint");
      int _jspx_eval_fmt_005fmessage_005f38 = _jspx_th_fmt_005fmessage_005f38.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f38.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f38);
      _jspx_th_fmt_005fmessage_005f38_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f38, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f38_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f39(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f39 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f39_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f39.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f39.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(703,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f39.setKey("dcr.endpoint");
      int _jspx_eval_fmt_005fmessage_005f39 = _jspx_th_fmt_005fmessage_005f39.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f39.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f39);
      _jspx_th_fmt_005fmessage_005f39_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f39, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f39_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f40(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f40 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f40_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f40.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f40.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(707,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f40.setKey("jwks.endpoint");
      int _jspx_eval_fmt_005fmessage_005f40 = _jspx_th_fmt_005fmessage_005f40.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f40.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f40);
      _jspx_th_fmt_005fmessage_005f40_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f40, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f40_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f41(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f41 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f41_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f41.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f41.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(714,30) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f41.setKey("passive.sts.local.config");
      int _jspx_eval_fmt_005fmessage_005f41 = _jspx_th_fmt_005fmessage_005f41.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f41.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f41);
      _jspx_th_fmt_005fmessage_005f41_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f41, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f41_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f42(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f42 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f42_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f42.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f42.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(719,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f42.setKey("idp.entity.id");
      int _jspx_eval_fmt_005fmessage_005f42 = _jspx_th_fmt_005fmessage_005f42.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f42.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f42);
      _jspx_th_fmt_005fmessage_005f42_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f42, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f42_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f43(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f43 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f43_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f43.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f43.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(723,36) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f43.setKey("idp.entity.id.help");
      int _jspx_eval_fmt_005fmessage_005f43 = _jspx_th_fmt_005fmessage_005f43.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f43.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f43);
      _jspx_th_fmt_005fmessage_005f43_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f43, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f43_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f44(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f44 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f44_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f44.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f44.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(729,73) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f44.setKey("saml.metadata.authn.requests.signing.enabled");
      int _jspx_eval_fmt_005fmessage_005f44 = _jspx_th_fmt_005fmessage_005f44.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f44.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f44);
      _jspx_th_fmt_005fmessage_005f44_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f44, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f44_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f45(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f45 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f45_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f45.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f45.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(740,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f45.setKey("passive.sts.url");
      int _jspx_eval_fmt_005fmessage_005f45 = _jspx_th_fmt_005fmessage_005f45.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f45.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f45);
      _jspx_th_fmt_005fmessage_005f45_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f45, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f45_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f46(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f46 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f46_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f46.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f46.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(747,40) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f46.setKey("sts.local.config");
      int _jspx_eval_fmt_005fmessage_005f46 = _jspx_th_fmt_005fmessage_005f46.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f46.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f46);
      _jspx_th_fmt_005fmessage_005f46_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f46, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f46_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f47(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f47 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f47_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f47.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f47.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(752,96) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f47.setKey("sts.url");
      int _jspx_eval_fmt_005fmessage_005f47 = _jspx_th_fmt_005fmessage_005f47.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f47.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f47);
      _jspx_th_fmt_005fmessage_005f47_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f47, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f47_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f48(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f48 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f48_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f48.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f48.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(764,44) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f48.setKey("apply.security.policy");
      int _jspx_eval_fmt_005fmessage_005f48 = _jspx_th_fmt_005fmessage_005f48.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f48.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f48);
      _jspx_th_fmt_005fmessage_005f48_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f48, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f48_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f49(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f49 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f49_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f49.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f49.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(777,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f49.setKey("scim.user.endpoint");
      int _jspx_eval_fmt_005fmessage_005f49 = _jspx_th_fmt_005fmessage_005f49.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f49.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f49);
      _jspx_th_fmt_005fmessage_005f49_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f49, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f49_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f50(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f50 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f50_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f50.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f50.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(781,63) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f50.setKey("scim.group.endpoint");
      int _jspx_eval_fmt_005fmessage_005f50 = _jspx_th_fmt_005fmessage_005f50.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f50.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f50);
      _jspx_th_fmt_005fmessage_005f50_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f50, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f50_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f51(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f51 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f51_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f51.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f51.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(785,65) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f51.setKey("scim2.user.endpoint");
      int _jspx_eval_fmt_005fmessage_005f51 = _jspx_th_fmt_005fmessage_005f51.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f51.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f51);
      _jspx_th_fmt_005fmessage_005f51_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f51, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f51_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f52(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f52 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f52_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f52.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f52.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(789,65) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f52.setKey("scim2.group.endpoint");
      int _jspx_eval_fmt_005fmessage_005f52 = _jspx_th_fmt_005fmessage_005f52.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f52.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f52);
      _jspx_th_fmt_005fmessage_005f52_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f52, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f52_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f53(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f53 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f53_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f53.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f53.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /idpmgt/idp-mgt-edit-local.jsp(1090,48) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f53.setKey("update");
      int _jspx_eval_fmt_005fmessage_005f53 = _jspx_th_fmt_005fmessage_005f53.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f53.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f53);
      _jspx_th_fmt_005fmessage_005f53_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f53, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f53_reused);
    }
    return false;
  }
}
